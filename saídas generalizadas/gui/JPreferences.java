/* ==========================================================
 * iSPD : iconic Simulator of Parallel and Distributed System
 * ==========================================================
 *
 * (C) Copyright 2010-2014, by Grupo de pesquisas em Sistemas Paralelos e Distribuídos da Unesp (GSPD).
 *
 * Project Info:  http://gspd.dcce.ibilce.unesp.br/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * ---------------
 * JPreferences.java
 * ---------------
 * (C) Copyright 2014, by Grupo de pesquisas em Sistemas Paralelos e Distribuídos da Unesp (GSPD).
 *
 * Original Author:  Denison Menezes (for GSPD);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 
 * 14-Out-2014 : Create class. Version 2.0.1;
 *
 */
package ispd.gui;

import ispd.arquivo.xml.ConfiguracaoISPD;

/**
 *
 * @author denison
 */
public class JPreferences extends javax.swing.JDialog {

    ConfiguracaoISPD configuracao;

    /**
     * Creates new form JPreferences
     */
    public JPreferences(java.awt.Frame parent, boolean modal, ConfiguracaoISPD configuracao) {
        super(parent, modal);
        this.configuracao = configuracao;
        initComponents();
        switch (configuracao.getSimulationMode()) {
            case ConfiguracaoISPD.DEFAULT:
                jRadioButtonDefaultActionPerformed(null);
                break;
            case ConfiguracaoISPD.OPTIMISTIC:
                jRadioButtonOptimisticActionPerformed(null);
                break;
            case ConfiguracaoISPD.GRAPHICAL:
                jRadioButtonGraphicalActionPerformed(null);
                break;
        }
        jTextFieldNumSim.setValue(configuracao.getNumberOfSimulations());
        jTextFieldThread.setValue(configuracao.getNumberOfThreads());
        jCheckBoxBarChartProcessing.setSelected(configuracao.getCreateProcessingChart());
        jCheckBoxPieChartCommunication.setSelected(configuracao.getCreateCommunicationChart());
        jCheckBoxTimeChartUser.setSelected(configuracao.getCreateUserThroughTimeChart());
        jCheckBoxTimeChartMachine.setSelected(configuracao.getCreateMachineThroughTimeChart());
        jCheckBoxTimeChartTask.setSelected(configuracao.getCreateTaskThroughTimeChart());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelSimulation = new javax.swing.JPanel();
        jRadioButtonDefault = new javax.swing.JRadioButton();
        jRadioButtonOptimistic = new javax.swing.JRadioButton();
        jRadioButtonGraphical = new javax.swing.JRadioButton();
        jLabelThread = new javax.swing.JLabel();
        jLabelNumSim = new javax.swing.JLabel();
        jTextFieldThread = new javax.swing.JFormattedTextField();
        jTextFieldNumSim = new javax.swing.JFormattedTextField();
        jPanelResults = new javax.swing.JPanel();
        jCheckBoxBarChartProcessing = new javax.swing.JCheckBox();
        jCheckBoxPieChartCommunication = new javax.swing.JCheckBox();
        jCheckBoxTimeChartUser = new javax.swing.JCheckBox();
        jCheckBoxTimeChartMachine = new javax.swing.JCheckBox();
        jCheckBoxTimeChartTask = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelSimulation.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulation"));

        jRadioButtonDefault.setSelected(true);
        jRadioButtonDefault.setText("Default");
        jRadioButtonDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDefaultActionPerformed(evt);
            }
        });

        jRadioButtonOptimistic.setText("Optimistic parallel (trial)");
        jRadioButtonOptimistic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonOptimisticActionPerformed(evt);
            }
        });

        jRadioButtonGraphical.setText("Graphical");
        jRadioButtonGraphical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonGraphicalActionPerformed(evt);
            }
        });

        jLabelThread.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelThread.setText("Number of threads");

        jLabelNumSim.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelNumSim.setText("Number of simulations");

        jTextFieldThread.setBackground(new java.awt.Color(238, 238, 238));
        jTextFieldThread.setBorder(null);
        jTextFieldThread.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jTextFieldThread.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldThread.setText("1");
        jTextFieldThread.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldThreadActionPerformed(evt);
            }
        });
        jTextFieldThread.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldThreadFocusLost(evt);
            }
        });

        jTextFieldNumSim.setBackground(new java.awt.Color(238, 238, 238));
        jTextFieldNumSim.setBorder(null);
        jTextFieldNumSim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jTextFieldNumSim.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldNumSim.setText("1");
        jTextFieldNumSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNumSimActionPerformed(evt);
            }
        });
        jTextFieldNumSim.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNumSimFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanelSimulationLayout = new javax.swing.GroupLayout(jPanelSimulation);
        jPanelSimulation.setLayout(jPanelSimulationLayout);
        jPanelSimulationLayout.setHorizontalGroup(
            jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSimulationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSimulationLayout.createSequentialGroup()
                        .addComponent(jRadioButtonDefault)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonOptimistic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonGraphical))
                    .addGroup(jPanelSimulationLayout.createSequentialGroup()
                        .addGroup(jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelThread, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelNumSim, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldThread, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNumSim, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanelSimulationLayout.setVerticalGroup(
            jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSimulationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonDefault)
                    .addComponent(jRadioButtonOptimistic)
                    .addComponent(jRadioButtonGraphical))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelThread)
                    .addComponent(jTextFieldThread, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumSim)
                    .addComponent(jTextFieldNumSim, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelResults.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        jCheckBoxBarChartProcessing.setSelected(true);
        jCheckBoxBarChartProcessing.setText("Chart of Processing");
        jCheckBoxBarChartProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBarChartProcessingActionPerformed(evt);
            }
        });

        jCheckBoxPieChartCommunication.setSelected(true);
        jCheckBoxPieChartCommunication.setText("Chart of Communication");
        jCheckBoxPieChartCommunication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPieChartCommunicationActionPerformed(evt);
            }
        });

        jCheckBoxTimeChartUser.setSelected(true);
        jCheckBoxTimeChartUser.setText("User computing through time");
        jCheckBoxTimeChartUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTimeChartUserActionPerformed(evt);
            }
        });

        jCheckBoxTimeChartMachine.setText("Machine use through time");
        jCheckBoxTimeChartMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTimeChartMachineActionPerformed(evt);
            }
        });

        jCheckBoxTimeChartTask.setText("Tasks through time");
        jCheckBoxTimeChartTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTimeChartTaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelResultsLayout = new javax.swing.GroupLayout(jPanelResults);
        jPanelResults.setLayout(jPanelResultsLayout);
        jPanelResultsLayout.setHorizontalGroup(
            jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBoxTimeChartUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxPieChartCommunication, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxBarChartProcessing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxTimeChartMachine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxTimeChartTask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(158, Short.MAX_VALUE))
        );
        jPanelResultsLayout.setVerticalGroup(
            jPanelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxBarChartProcessing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPieChartCommunication)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxTimeChartUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxTimeChartMachine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxTimeChartTask)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDefaultActionPerformed
        jRadioButtonDefault.setSelected(true);
        jRadioButtonOptimistic.setSelected(false);
        jRadioButtonGraphical.setSelected(false);
        textFieldEnable(true);
        configuracao.setSimulationMode(ConfiguracaoISPD.DEFAULT);
    }//GEN-LAST:event_jRadioButtonDefaultActionPerformed

    private void jRadioButtonOptimisticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonOptimisticActionPerformed
        jRadioButtonDefault.setSelected(false);
        jRadioButtonOptimistic.setSelected(true);
        jRadioButtonGraphical.setSelected(false);
        textFieldEnable(true);
        configuracao.setSimulationMode(ConfiguracaoISPD.OPTIMISTIC);
    }//GEN-LAST:event_jRadioButtonOptimisticActionPerformed

    private void jRadioButtonGraphicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonGraphicalActionPerformed
        jRadioButtonDefault.setSelected(false);
        jRadioButtonOptimistic.setSelected(false);
        jRadioButtonGraphical.setSelected(true);
        textFieldEnable(false);
        configuracao.setSimulationMode(ConfiguracaoISPD.GRAPHICAL);
    }//GEN-LAST:event_jRadioButtonGraphicalActionPerformed

    private void jTextFieldThreadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldThreadFocusLost
        try {
            Integer valor = Integer.parseInt(jTextFieldThread.getText());
            if (valor > 0) {
                configuracao.setNumberOfThreads(valor);
            } else {
                jTextFieldThread.setValue(configuracao.getNumberOfThreads());
            }
        } catch(NumberFormatException ex) {
            jTextFieldThread.setValue(configuracao.getNumberOfThreads());
        }
    }//GEN-LAST:event_jTextFieldThreadFocusLost

    private void jTextFieldThreadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldThreadActionPerformed
        jTextFieldThread.transferFocus();
    }//GEN-LAST:event_jTextFieldThreadActionPerformed

    private void jTextFieldNumSimFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNumSimFocusLost
        try {
            Integer valor = Integer.parseInt(jTextFieldNumSim.getText());
            if (valor > 0) {
                configuracao.setNumberOfSimulations(valor);
            } else {
                jTextFieldNumSim.setValue(configuracao.getNumberOfSimulations());
            }
        } catch(NumberFormatException ex) {
            jTextFieldNumSim.setValue(configuracao.getNumberOfSimulations());
        }
    }//GEN-LAST:event_jTextFieldNumSimFocusLost

    private void jTextFieldNumSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNumSimActionPerformed
        jTextFieldNumSim.transferFocus();
    }//GEN-LAST:event_jTextFieldNumSimActionPerformed

    private void jCheckBoxBarChartProcessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBarChartProcessingActionPerformed
        configuracao.setCreateProcessingChart(jCheckBoxBarChartProcessing.isSelected());
    }//GEN-LAST:event_jCheckBoxBarChartProcessingActionPerformed

    private void jCheckBoxPieChartCommunicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPieChartCommunicationActionPerformed
        configuracao.setCreateCommunicationChart(jCheckBoxPieChartCommunication.isSelected());
    }//GEN-LAST:event_jCheckBoxPieChartCommunicationActionPerformed

    private void jCheckBoxTimeChartUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTimeChartUserActionPerformed
        configuracao.setCreateUserThroughTimeChart(jCheckBoxTimeChartUser.isSelected());
    }//GEN-LAST:event_jCheckBoxTimeChartUserActionPerformed

    private void jCheckBoxTimeChartMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTimeChartMachineActionPerformed
        configuracao.setCreateMachineThroughTimeChart(jCheckBoxTimeChartMachine.isSelected());
    }//GEN-LAST:event_jCheckBoxTimeChartMachineActionPerformed

    private void jCheckBoxTimeChartTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTimeChartTaskActionPerformed
        configuracao.setCreateTaskThroughTimeChart(jCheckBoxTimeChartTask.isSelected());
    }//GEN-LAST:event_jCheckBoxTimeChartTaskActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxBarChartProcessing;
    private javax.swing.JCheckBox jCheckBoxPieChartCommunication;
    private javax.swing.JCheckBox jCheckBoxTimeChartMachine;
    private javax.swing.JCheckBox jCheckBoxTimeChartTask;
    private javax.swing.JCheckBox jCheckBoxTimeChartUser;
    private javax.swing.JLabel jLabelNumSim;
    private javax.swing.JLabel jLabelThread;
    private javax.swing.JPanel jPanelResults;
    private javax.swing.JPanel jPanelSimulation;
    private javax.swing.JRadioButton jRadioButtonDefault;
    private javax.swing.JRadioButton jRadioButtonGraphical;
    private javax.swing.JRadioButton jRadioButtonOptimistic;
    private javax.swing.JFormattedTextField jTextFieldNumSim;
    private javax.swing.JFormattedTextField jTextFieldThread;
    // End of variables declaration//GEN-END:variables

    private void textFieldEnable(boolean b) {
        jTextFieldThread.setEnabled(b);
        jLabelThread.setEnabled(b);
        jTextFieldNumSim.setEnabled(b);
        jLabelNumSim.setEnabled(b);
    }
}

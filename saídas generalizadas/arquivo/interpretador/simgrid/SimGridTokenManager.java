/* Generated By:JavaCC: Do not edit this line. SimGridTokenManager.java */
/* ==========================================================
 * iSPD : iconic Simulator of Parallel and Distributed System
 * ==========================================================
 *
 * (C) Copyright 2010-2014, by Grupo de pesquisas em Sistemas Paralelos e Distribuídos da Unesp (GSPD).
 *
 * Project Info:  http://gspd.dcce.ibilce.unesp.br/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * (C) Copyright 2014, by Grupo de pesquisas em Sistemas Paralelos e Distribuídos da Unesp (GSPD).
 *
 * Original Author:  Victor Aoqui;
 *
 */
package ispd.arquivo.interpretador.simgrid;
import ispd.arquivo.xml.IconicoXML;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Formatter;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;

/** Token Manager. */
public class SimGridTokenManager implements SimGridConstants
{
        private static int contaErrosLex = 0;
        private static String errosLex = "\u005cnErros l\u00e9xicos:\u005cn";

        public static int contaErrosLex()
        {
                return contaErrosLex;
        }

        public static void addErroLex(String msg)
        {
                errosLex = errosLex + "\u005cn" + msg;
                contaErrosLex++;
        }

        public static String getErrosLex()
        {
                return errosLex+"\u005cn";
        }

        public static void reset()
        {
                contaErrosLex = 0;
                errosLex = "\u005cnErros l\u00e9xicos:\u005cn";
        }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fffffeL) != 0L)
         {
            jjmatchedKind = 27;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fffffeL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fffffeL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x7fffe78L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x7ffee70L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x7fa6e30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x7f86e30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x3f86a10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x3f80a10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x3e80a00L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x3c00a00L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x3c00a00L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x3c00200L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x2400000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x2400000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x2400000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x2400000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x2400000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 31);
      case 34:
         return jjStopAtPos(0, 37);
      case 39:
         return jjStopAtPos(0, 36);
      case 46:
         return jjStopAtPos(0, 29);
      case 47:
         return jjStopAtPos(0, 30);
      case 60:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 61:
         return jjStopAtPos(0, 35);
      case 62:
         return jjStopAtPos(0, 34);
      case 63:
         return jjStopAtPos(0, 32);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1c02000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x808L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2010400L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200240L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x140080L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4008000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x2L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa8038L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200800L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2140000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c11240L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4480L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2140000L);
      case 99:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 108:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(2, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x208000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x5c00000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xa1000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(2, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x820L);
      case 117:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(2, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x240L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2400L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 101:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(3, 3);
         return jjMoveStringLiteralDfa4_0(active0, 0x10020L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(3, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x2020240L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1e00000L);
      case 101:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x120600L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(4, 16);
         break;
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100020L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2010L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x6080000L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x1c00800L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x1c00010L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x102000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 121:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(6, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x1c00000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2100000L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(7, 13);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         return jjMoveStringLiteralDfa8_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 104:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(8, 4);
         break;
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x1c00000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(9, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000200L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x1800000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 107:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(11, 11);
         break;
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(12, 23);
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(12, 24);
         break;
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(12, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(17, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(19, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x80000400ffffc8ffL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  else if ((0x2c00fb7a00000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     kind = 28;
                  break;
               case 2:
                  if ((0x2c00fb7a00000000L & l) != 0L)
                     kind = 38;
                  break;
               case 3:
                  if ((0x80000400ffffc8ffL & l) != 0L)
                     kind = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if ((0x78000000e8000001L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if ((0x8000000100000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  break;
               case 2:
                  if ((0x78000000e8000001L & l) != 0L)
                     kind = 38;
                  break;
               case 3:
                  if ((0x8000000100000000L & l) != 0L)
                     kind = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 39)
                     kind = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 46);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\170\155\154", "\143\160\165", "\156\141\155\145", 
"\142\141\156\144\167\151\144\164\150", "\154\141\164\145\156\143\171", "\162\157\165\164\145", "\163\162\143", 
"\144\163\164", "\162\157\165\164\145\137\145\154\145\155\145\156\164", 
"\160\162\157\143\145\163\163", "\156\145\164\167\157\162\153\137\154\151\156\153", "\150\157\163\164", 
"\146\165\156\143\164\151\157\156", "\141\162\147\165\155\145\156\164", "\166\141\154\165\145", 
"\160\157\167\145\162", "\155\141\163\164\145\162", "\163\154\141\166\145", 
"\164\141\163\153\163\157\165\162\143\145", "\163\154\141\166\145\143\157\155\155", 
"\162\145\154\157\141\144\150\157\163\164", "\146\157\162\167\141\162\144\145\162\163\143\150\145\144\165\154\145\162", 
"\146\157\162\167\141\162\144\145\162\156\157\144\145", "\146\157\162\167\141\162\144\145\162\143\157\155\155", 
"\160\154\141\164\146\157\162\155\137\144\145\163\143\162\151\160\164\151\157\156", "\166\145\162\163\151\157\156", null, null, "\56", "\57", "\41", "\77", "\74", 
"\76", "\75", "\47", "\42", null, null, null, null, null, null, null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 
};
static final long[] jjtoToken = {
   0x7fffffffffL, 
};
static final long[] jjtoSkip = {
   0xff8000000000L, 
};
static final long[] jjtoSpecial = {
   0x8000000000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[4];
static private final int[] jjstateSet = new int[8];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public SimGridTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public SimGridTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 4; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 47)
       {
          jjmatchedKind = 47;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 39 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                addErroLex(InterpretadorSimGrid.getFileName() + ": Erro na linha "+input_stream.getEndLine()+", coluna "+input_stream.getEndColumn()+". Caracter \u005c""+image+"\u005c" n\u00e3o \u00e9 aceito.");
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}

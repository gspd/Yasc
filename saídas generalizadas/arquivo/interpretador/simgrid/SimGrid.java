/* Generated By:JavaCC: Do not edit this line. SimGrid.java */
/* ==========================================================
 * iSPD : iconic Simulator of Parallel and Distributed System
 * ==========================================================
 *
 * (C) Copyright 2010-2014, by Grupo de pesquisas em Sistemas Paralelos e Distribuídos da Unesp (GSPD).
 *
 * Project Info:  http://gspd.dcce.ibilce.unesp.br/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.]
 *
 * (C) Copyright 2014, by Grupo de pesquisas em Sistemas Paralelos e Distribuídos da Unesp (GSPD).
 *
 * Original Author:  Victor Aoqui;
 *
 */
package ispd.arquivo.interpretador.simgrid;

import ispd.arquivo.xml.IconicoXML;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Formatter;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;

        public class SimGrid implements SimGridConstants {
                private Formatter file;
                private static int net;
                private String arg;
                private static SimGrid parser;
                private static List<Server> servers = new ArrayList<Server>();
                private static List<Master> masters = new ArrayList<Master>();
                private static List<Network> networks = new ArrayList<Network>();
                private static List<Route> routes = new ArrayList<Route>();
                private static int contaErrosSint = 0;
                private static int contaErrosSem = 0;
                private static String errosSint = "Erros sint\u00e1ticos:\u005cn";
                private static String errosSem = "Erros sem\u00e2nticos:\u005cn";
                private String erros = "";

                private static class Server
                {
                        private String id;
                        private String power;

                        public Server()
                        {
                                id = "";
                                power = "0.0";
                        }

                        public void setID(String id)
                        {
                                this.id = id;
                        }

                        public void setPower(String power)
                        {
                                this.power = power;
                        }

                        public String getID()
                        {
                                return id;
                        }

                        public String getPower()
                        {
                                return power;
                        }
                }

                private static class Master extends Server
                {
                        private String numtarefas;
                        private String maxcomp;
                        private String mincomp;
                        private String maxcomm;
                        private String mincomm;
                        private List<String> slaves;

                        public Master()
                        {
                                numtarefas = "0";
                                maxcomp = "0.0";
                                mincomp = "0.0";
                                maxcomm = "0.0";
                                mincomm = "0.0";
                                slaves = new ArrayList<String>();
                        }

                        public void setSlaves(List<String> slaves)
                        {
                                this.slaves = slaves;
                        }

                        public void setCarga(String numtarefas, String maxcomp, String mincomp, String maxcomm, String mincomm)
                        {
                                this.numtarefas = numtarefas;
                                this.maxcomp = maxcomp;
                                this.mincomp = mincomp;
                                this.maxcomm = maxcomm;
                                this.mincomm = mincomm;
                        }

                        public void setCarga(String numtarefas, String maxcomp, String maxcomm)
                        {
                                this.numtarefas = numtarefas;
                                this.maxcomp = maxcomp;
                                this.maxcomm = maxcomm;
                        }

                        public List<String> getEscravos()
                        {
                                return slaves;
                        }

                        public String getNumtarefas()
                        {
                                return numtarefas;
                        }

                        public String getMaxcomp()
                        {
                                return maxcomp;
                        }

                        public String getMincomp()
                        {
                                return mincomp;
                        }

                        public String getMaxcomm()
                        {
                                return maxcomm;
                        }

                        public String getMincomm()
                        {
                                return mincomm;
                        }
                }

                private static class Network
                {
                        private String id;
                        private String band;
                        private String latency;

                        public Network()
                        {
                                id = "";
                                band = "0.0";
                                latency = "0.0";
                        }

                        public void setAtributos(String id, String band, String latency)
                        {
                                this.id = id;
                                this.band = band;
                                this.latency = latency;
                        }

                        public String getID()
                        {
                                return id;
                        }

                        public String getBand()
                        {
                                return band;
                        }

                        public String getLatency()
                        {
                                return latency;
                        }
                }

                private static class Route extends Network
                {
                        private int net;
                        private String src;
                        private String dst;
                        private boolean internet;

                        public Route() {
                            net = 0;
                            src = "";
                            dst = "";
                            internet = false;
                        }

                        public boolean isInternet() {
                            return internet;
                        }

                        public void setInternet(boolean internet) {
                            this.internet = internet;
                        }

                        public void setRoute(int net, String src, String dst)
                        {
                                this.net = net;
                                this.src = src;
                                this.dst = dst;
                        }

                        public int getNet()
                        {
                                return net;
                        }

                        public String getSrc()
                        {
                                return src;
                        }

                        public String getDst()
                        {
                                return dst;
                        }
                }

                public static SimGrid getInstance(FileInputStream file)
                {
                        if(parser == null)
                                parser = new SimGrid(file);
                        return parser;
                }

                public void closeFile()
                {
                        if(file!=null)
                                file.close();
                }

                public boolean resultadoParser()
                {
                        if(token_source.contaErrosLex() > 0 || contaErrosSint() > 0 || contaErrosSem() > 0)
                        {
                                addErro("Foram encontrados "+String.valueOf(token_source.contaErrosLex())+" erros l\u00e9xicos.");
                                addErro("Foram encontrados "+String.valueOf(contaErrosSint())+" erros sint\u00e1ticos.");
                                addErro("Foram encontrados "+String.valueOf(contaErrosSem())+" erros sem\u00e2nticos.");
                                if(token_source.contaErrosLex() > 0)
                                        addErro(token_source.getErrosLex());
                                if(contaErrosSint() > 0)
                                        addErro(getErrosSint());
                                if(contaErrosSem() > 0)
                                        addErro(getErrosSem());
                                JOptionPane.showMessageDialog(null, getErros(),"Erro!", JOptionPane.ERROR_MESSAGE);
                        }
                        else
                        {
                                JOptionPane.showOptionDialog(null,"Modelo SimGrid reconhecido com sucesso.", "Modelo SimGrid reconhecido", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
                                return false;
                        }
                        return true;
                }

                public void writefile() throws ParseException, TokenMgrError, IOException
                {
                        List<String> escravos;
                        try
                        {
                                File arquivo = new File("modeloiconico");
                                file = new Formatter(arquivo);

                                for(Master m:masters)
                                {
                                        escravos = m.getEscravos();
                                        file.format("MAQ %s %s 0.0 MESTRE RoundRobin LMAQ", m.getID(), m.getPower());
                                        for(String e:escravos)
                                                file.format(" %s", e);
                                        file.format("\u005cn");
                                }

                                for(Server s:servers)
                                        file.format("MAQ %s %s 0.0 ESCRAVO\u005cn", s.getID(), s.getPower());

                                for(Route r:routes)
                                    if(r.isInternet())
                                        file.format("INET %s %s %s 0.0\u005cn", r.getID(), r.getBand(), r.getLatency());

                                for(Route r:routes)
                                    if(!r.isInternet())
                                        file.format("REDE %sT%d %s %s 0.0 CONECTA %s %s\u005cn", r.getID(), r.getNet(), r.getBand(), r.getLatency(), r.getSrc(), r.getDst());

                                for(Master m:masters)
                                        file.format("CARGA MAQUINA %s %s %s %s %s %s", m.getID(), m.getNumtarefas(), m.getMaxcomp(), m.getMincomp(), m.getMaxcomm(), m.getMincomm());

                                closeFile();
                                //JOptionPane.showMessageDialog(null,"File successfully opened\n"+arquivo.getAbsolutePath(),"Completed",JOptionPane.INFORMATION_MESSAGE);
                        }
                        catch(Exception e)
                        {
                                JOptionPane.showMessageDialog(null,e.getMessage(),"Error",JOptionPane.WARNING_MESSAGE);
                        }
                }

                public IconicoXML getModelo() {
                    IconicoXML xml = new IconicoXML();
                    ArrayList usuarios = new ArrayList();
                    usuarios.add("user1");
                    xml.addUsers(usuarios);
                    int x = 100, y = 100, local = 0, global = 0;
                    HashMap<String, Integer> maq = new HashMap<String, Integer>();
                    for (Server s : servers) {
                        maq.put(s.getID(), global);
                        xml.addMachine(
                                x, y, local, global, s.getID(),
                                Double.valueOf(s.getPower()), 0.0,
                                "---", "user1",
                                1, 0.0, 0.0,
                                false, null);
                        local++;
                        global++;
                    }
                    for (Route r : routes) {
                        if (r.isInternet()) {
                            maq.put(r.getID(), global);
                            xml.addInternet(x, y, local, global, r.getID(),
                                    Double.valueOf(r.getBand()), 0, Double.valueOf(r.getLatency()));
                            local++;
                            global++;
                        }
                    }
                    for (Master m : masters) {
                        maq.put(m.getID(), global);
                        local++;
                        global++;
                    }
                    for (Master m : masters) {
                        List<Integer> slv = new ArrayList<Integer>();
                        for (String escravo : m.getEscravos()) {
                            slv.add(maq.get(escravo));
                        }
                        xml.addMachine(
                                x, y, maq.get(m.getID()), maq.get(m.getID()), m.getID(),
                                (double) Double.valueOf(m.getPower()), 0.0, "RoundRobin",
                                "user1", 1, 0.0, 0.0, true, slv);
                    }
                    for (Route r : routes) {
                        if (!r.isInternet()) {
                            xml.addLink(x, y, x, y, local, global, r.getID(),
                                    Double.valueOf(r.getBand()), 0, Double.valueOf(r.getLatency()),
                                    maq.get(r.getSrc()), maq.get(r.getDst()));
                            local++;
                            global++;
                        }
                    }
                    for (Master m : masters) {
                        xml.addLoadNo("app0", "user1", m.getID(), Integer.valueOf(m.getNumtarefas()),
                                Double.valueOf(m.getMaxcomp()), Double.valueOf(m.getMincomp()),
                                Double.valueOf(m.getMaxcomm()), Double.valueOf(m.getMincomm()));
                    }
                    return xml;
                }


                public int contaErrosSint()
                {
                        return contaErrosSint;
                }

                public int contaErrosSem()
                {
                        return contaErrosSem;
                }

                public void addErro(String msg)
                {
                        erros = erros + msg + "\u005cn";
                }

                public static void addErroSint(String msg)
                {
                        errosSint = errosSint + "\u005cn" + msg;
                        contaErrosSint++;
                }

                public static void addErroSem(String msg)
                {
                        errosSem = errosSem + "\u005cn" + msg;
                        contaErrosSem++;
                }

                public String getErros()
                {
                        return erros;
                }

                public String getErrosSint()
                {
                        return errosSint+"\u005cn";
                }

                public String getErrosSem()
                {
                        return errosSem+"\u005cn";
                }

                public void reset()
                {
                        file = null;
                        net = 0;
                        arg = "";
                        contaErrosSint = 0;
                        contaErrosSem = 0;
                        errosSint = "\u005cnErros sint\u00e1ticos:\u005cn";
                        errosSem = "\u005cnErros sem\u00e2nticos:\u005cn";
                        erros = "";
                        masters = new ArrayList<Master>();
                        servers = new ArrayList<Server>();
                        networks = new ArrayList<Network>();
                        routes = new ArrayList<Route>();
                        token_source.reset();
                }

  static final public String inteiro() throws ParseException {
        String t = "";
    try {
      label_1:
      while (true) {
        jj_consume_token(digito);
                           t += token.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case digito:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
                                                 {if (true) return t;}
    } catch (ParseException e) {
                Token t1 = getToken(1);
                addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+t1.endLine+", coluna "+t1.endColumn+". Valor atribu\u00eddo inv\u00e1lido.");
    }
    throw new Error("Missing return statement in function");
  }

  static final public String real() throws ParseException {
        String t1, t2;
    try {
      t1 = inteiro();
      jj_consume_token(ponto);
                                        t1 += token.image;
      t2 = inteiro();
                                                                            t1 += t2; {if (true) return t1;}
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+t.endLine+", coluna "+t.endColumn+". Valor atribu\u00eddo inv\u00e1lido.");
    }
    throw new Error("Missing return statement in function");
  }

  static final public String num_tarefas() throws ParseException {
        String t;
    t = inteiro();
                       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public String max_comp_tam_tarefa() throws ParseException {
        String t;
    if (jj_2_1(2147483647)) {
      t = real();
                                      {if (true) return t;}
    } else if (jj_2_2(2147483647)) {
      t = inteiro();
                                                                                       t += ".0"; {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String min_comp_tam_tarefa() throws ParseException {
        String t;
    if (jj_2_3(2147483647)) {
      t = real();
                                      {if (true) return t;}
    } else if (jj_2_4(2147483647)) {
      t = inteiro();
                                                                                       t += ".0"; {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String max_comm_tam_tarefa() throws ParseException {
        String t;
    if (jj_2_5(2147483647)) {
      t = real();
                                      {if (true) return t;}
    } else if (jj_2_6(2147483647)) {
      t = inteiro();
                                                                                       t += ".0"; {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String min_comm_tam_tarefa() throws ParseException {
        String t;
    if (jj_2_7(2147483647)) {
      t = real();
                                      {if (true) return t;}
    } else if (jj_2_8(2147483647)) {
      t = inteiro();
                                                                                       t += ".0"; {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String capacidade_processamento() throws ParseException {
        String t;
    if (jj_2_9(2147483647)) {
      t = real();
                                      {if (true) return t;}
    } else if (jj_2_10(2147483647)) {
      t = inteiro();
                                                                                       t += ".0"; {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String largura_banda() throws ParseException {
        String t;
    if (jj_2_11(2147483647)) {
      t = real();
                                      {if (true) return t;}
    } else if (jj_2_12(2147483647)) {
      t = inteiro();
                                                                                       t += ".0"; {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String latencia() throws ParseException {
        String t;
    if (jj_2_13(2147483647)) {
      t = real();
                                      {if (true) return t;}
    } else if (jj_2_14(2147483647)) {
      t = inteiro();
                                                                                       t += ".0"; {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String identificador() throws ParseException {
        String t = "";
        Token t1;
        boolean erro = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case letra:
        jj_consume_token(letra);
                           t1 = getToken(1); t += token.image;
        break;
      case digito:
        jj_consume_token(digito);
                          t1 = getToken(1); t += token.image; erro = true;
        break;
      case especiais:
        jj_consume_token(especiais);
                             t1 = getToken(1); t += token.image; erro = true;
        break;
      case ponto:
        jj_consume_token(ponto);
                         t1 = getToken(1); t += token.image; erro = true;
        break;
      case barra:
        jj_consume_token(barra);
                         t1 = getToken(1); t += token.image; erro = true;
        break;
      case exclamacao:
        jj_consume_token(exclamacao);
                              t1 = getToken(1); t += token.image; erro = true;
        break;
      case interrogacao:
        jj_consume_token(interrogacao);
                                t1 = getToken(1); t += token.image; erro = true;
        break;
      case menor:
        jj_consume_token(menor);
                         t1 = getToken(1); t += token.image; erro = true;
        break;
      case maior:
        jj_consume_token(maior);
                         t1 = getToken(1); t += token.image; erro = true;
        break;
      case igual:
        jj_consume_token(igual);
                         t1 = getToken(1); t += token.image; erro = true;
        break;
      case apostrofo:
        jj_consume_token(apostrofo);
                             t1 = getToken(1); t += token.image; erro = true;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case letra:
        case digito:
        case ponto:
        case barra:
        case exclamacao:
        case interrogacao:
        case menor:
        case maior:
        case igual:
        case apostrofo:
        case especiais:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case letra:
          jj_consume_token(letra);
                          t1 = getToken(1); t += token.image;
          break;
        case digito:
          jj_consume_token(digito);
                          t1 = getToken(1); t += token.image;
          break;
        case especiais:
          jj_consume_token(especiais);
                             t1 = getToken(1); t += token.image;
          break;
        case ponto:
          jj_consume_token(ponto);
                         t1 = getToken(1); t += token.image; erro = true;
          break;
        case barra:
          jj_consume_token(barra);
                         t1 = getToken(1); t += token.image; erro = true;
          break;
        case exclamacao:
          jj_consume_token(exclamacao);
                              t1 = getToken(1); t += token.image; erro = true;
          break;
        case interrogacao:
          jj_consume_token(interrogacao);
                                t1 = getToken(1); t += token.image; erro = true;
          break;
        case menor:
          jj_consume_token(menor);
                         t1 = getToken(1); t += token.image; erro = true;
          break;
        case maior:
          jj_consume_token(maior);
                         t1 = getToken(1); t += token.image; erro = true;
          break;
        case igual:
          jj_consume_token(igual);
                         t1 = getToken(1); t += token.image; erro = true;
          break;
        case apostrofo:
          jj_consume_token(apostrofo);
                             t1 = getToken(1); t += token.image; erro = true;
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                        if(erro == true)
                        {
                                token_source.addErroLex(InterpretadorSimGrid.getFileName() + ": Erro na linha "+t1.endLine+", coluna "+t1.endColumn+". Identificador " + t +" declarado incorretamente.");
                        }
                        {if (true) return t;}
    } catch (ParseException e) {
                Token t2 = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t2.endLine+", coluna "+t2.endColumn+".");
    }
    throw new Error("Missing return statement in function");
  }

  static final public String servidor_ID() throws ParseException {
        String t;
    t = identificador();
                             {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public String rede_ID() throws ParseException {
        String t;
    t = identificador();
                             {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void modelo() throws ParseException {
    inicio_xml_plataforma();
    if (jj_2_15(2)) {
      application_file();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case menor:
        plataform_file();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    fim_plataforma();
  }

  static final public void application_file() throws ParseException {
    label_3:
    while (true) {
      processos();
      if (jj_2_16(2)) {
        ;
      } else {
        break label_3;
      }
    }
  }

  static final public void plataform_file() throws ParseException {
    label_4:
    while (true) {
      plataforma();
      if (jj_2_17(2)) {
        ;
      } else {
        break label_4;
      }
    }
  }

  static final public void plataforma() throws ParseException {
    if (jj_2_18(2)) {
      servidor();
    } else if (jj_2_19(2)) {
      rede();
    } else if (jj_2_20(2)) {
      roteamento();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void inicio_xml_plataforma() throws ParseException {
    try {
      jj_consume_token(menor);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case interrogacao:
        jj_consume_token(interrogacao);
        jj_consume_token(XML);
        jj_consume_token(VERSION);
        jj_consume_token(igual);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case apostrofo:
          jj_consume_token(apostrofo);
          break;
        case aspas:
          jj_consume_token(aspas);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        real();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case apostrofo:
          jj_consume_token(apostrofo);
          break;
        case aspas:
          jj_consume_token(aspas);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case letra:
          case digito:
          case igual:
          case especiais:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case letra:
            case digito:
            case especiais:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_6;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case letra:
              jj_consume_token(letra);
              break;
            case digito:
              jj_consume_token(digito);
              break;
            case especiais:
              jj_consume_token(especiais);
              break;
            default:
              jj_la1[9] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(igual);
          jj_consume_token(aspas);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case letra:
            case digito:
            case especiais:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_7;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case letra:
              jj_consume_token(letra);
              break;
            case digito:
              jj_consume_token(digito);
              break;
            case especiais:
              jj_consume_token(especiais);
              break;
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(aspas);
        }
        jj_consume_token(interrogacao);
        jj_consume_token(maior);
        jj_consume_token(menor);
        jj_consume_token(PLATFORM_DESCRIPTION);
        jj_consume_token(VERSION);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        inteiro();
        jj_consume_token(aspas);
        jj_consume_token(maior);
        break;
      case PLATFORM_DESCRIPTION:
        jj_consume_token(PLATFORM_DESCRIPTION);
        jj_consume_token(VERSION);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        inteiro();
        jj_consume_token(aspas);
        jj_consume_token(maior);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static final public void fim_plataforma() throws ParseException {
    try {
      jj_consume_token(menor);
      jj_consume_token(barra);
      jj_consume_token(PLATFORM_DESCRIPTION);
      jj_consume_token(maior);
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static final public void processos() throws ParseException {
    if (jj_2_21(2147483647)) {
      master();
    } else if (jj_2_22(2147483647)) {
      master();
    } else if (jj_2_23(2147483647)) {
      slave();
    } else if (jj_2_24(2147483647)) {
      slave();
    } else if (jj_2_25(2147483647)) {
      outros();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void master() throws ParseException {
        String t1, t2, t3, t4, t5, t6, t7;
        Master m = new Master();
        boolean found = false;
        List<String> slaves = new ArrayList<String>();
    try {
      jj_consume_token(menor);
      jj_consume_token(PROCESS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOST:
        jj_consume_token(HOST);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t1 = servidor_ID();
        jj_consume_token(aspas);
        jj_consume_token(FUNCTION);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        jj_consume_token(MASTER);
        jj_consume_token(aspas);
        break;
      case FUNCTION:
        jj_consume_token(FUNCTION);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        jj_consume_token(MASTER);
        jj_consume_token(aspas);
        jj_consume_token(HOST);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t1 = servidor_ID();
        jj_consume_token(aspas);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(maior);
                        Token t = getToken(1);
                        for(Master testem:masters)
                                if(t1.equals(testem.getID()))
                                {
                                        addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+t.endLine+", coluna "+t.endColumn+". Servidor \u005c""+t1+"\u005c" j\u00e1 foi declarado.");
                                        found = true;
                                }
      jj_consume_token(menor);
      jj_consume_token(ARGUMENT);
      jj_consume_token(VALUE);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      t2 = num_tarefas();
      jj_consume_token(aspas);
      jj_consume_token(barra);
      jj_consume_token(maior);
      if (jj_2_26(2147483647)) {
        jj_consume_token(menor);
        jj_consume_token(ARGUMENT);
        jj_consume_token(VALUE);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t3 = max_comp_tam_tarefa();
        jj_consume_token(aspas);
        jj_consume_token(barra);
        jj_consume_token(maior);
        jj_consume_token(menor);
        jj_consume_token(ARGUMENT);
        jj_consume_token(VALUE);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t4 = min_comp_tam_tarefa();
        jj_consume_token(aspas);
        jj_consume_token(barra);
        jj_consume_token(maior);
        jj_consume_token(menor);
        jj_consume_token(ARGUMENT);
        jj_consume_token(VALUE);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t5 = max_comm_tam_tarefa();
        jj_consume_token(aspas);
        jj_consume_token(barra);
        jj_consume_token(maior);
        jj_consume_token(menor);
        jj_consume_token(ARGUMENT);
        jj_consume_token(VALUE);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t6 = min_comm_tam_tarefa();
        jj_consume_token(aspas);
        jj_consume_token(barra);
        jj_consume_token(maior);
                                                                                                               m.setCarga(t2, t3, t4, t5, t6);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case menor:
          jj_consume_token(menor);
          jj_consume_token(ARGUMENT);
          jj_consume_token(VALUE);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t3 = max_comp_tam_tarefa();
          jj_consume_token(aspas);
          jj_consume_token(barra);
          jj_consume_token(maior);
          jj_consume_token(menor);
          jj_consume_token(ARGUMENT);
          jj_consume_token(VALUE);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t4 = max_comm_tam_tarefa();
          jj_consume_token(aspas);
          jj_consume_token(barra);
          jj_consume_token(maior);
                                                                                                               m.setCarga(t2, t3, t4);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_8:
      while (true) {
        jj_consume_token(menor);
        jj_consume_token(ARGUMENT);
        jj_consume_token(VALUE);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t7 = servidor_ID();
                        Token tt = getToken(1);
                        if(slaves.contains(t7))
                        {
                                addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+tt.endLine+", coluna "+tt.endColumn+". Servidor \u005c""+t7+"\u005c" j\u00e1 foi declarado.");
                                found = true;
                        }
                        else
                                slaves.add(t7);
        jj_consume_token(aspas);
        jj_consume_token(barra);
        jj_consume_token(maior);
        if (jj_2_27(2)) {
          ;
        } else {
          break label_8;
        }
      }
      jj_consume_token(menor);
      jj_consume_token(barra);
      jj_consume_token(PROCESS);
      jj_consume_token(maior);
                        if(!found)
                        {
                                m.setID(t1);
                                m.setSlaves(slaves);
                                masters.add(m);
                        }
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static final public void slave() throws ParseException {
        String t;
        boolean found = false;
        Server s = new Server();
    try {
      jj_consume_token(menor);
      jj_consume_token(PROCESS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOST:
        jj_consume_token(HOST);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t = servidor_ID();
        jj_consume_token(aspas);
        jj_consume_token(FUNCTION);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        jj_consume_token(SLAVE);
        jj_consume_token(aspas);
        break;
      case FUNCTION:
        jj_consume_token(FUNCTION);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        jj_consume_token(SLAVE);
        jj_consume_token(aspas);
        jj_consume_token(HOST);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t = servidor_ID();
        jj_consume_token(aspas);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(barra);
      jj_consume_token(maior);
                        Token t1 = getToken(1);
                        for(Server testes:servers)
                                if(t.equals(testes.getID()))
                                {
                                        addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+t1.endLine+", coluna "+t1.endColumn+". Servidor \u005c""+t+"\u005c" j\u00e1 foi declarado.");
                                        found = true;
                                }
                        if(found == false)
                        {
                                s.setID(t);
                                servers.add(s);
                        }
    } catch (ParseException e) {
                Token t2 = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t2.endLine+", coluna "+t2.endColumn+".");
    }
  }

  static final public void outros() throws ParseException {
    if (jj_2_28(2147483647)) {
      tasksource();
    } else if (jj_2_29(2147483647)) {
      slavecomm();
    } else if (jj_2_30(2147483647)) {
      reloadhost();
    } else if (jj_2_31(2147483647)) {
      forwarderscheduler();
    } else if (jj_2_32(2147483647)) {
      forwardernode();
    } else if (jj_2_33(2147483647)) {
      forwardercomm();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void servidor() throws ParseException {
        String t1, t2;
        boolean found = false;
    try {
                 Token t = getToken(1);
      jj_consume_token(menor);
      jj_consume_token(CPU);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        jj_consume_token(NAME);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t1 = servidor_ID();
        jj_consume_token(aspas);
        jj_consume_token(POWER);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t2 = capacidade_processamento();
        jj_consume_token(aspas);
        break;
      case POWER:
        jj_consume_token(POWER);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t2 = capacidade_processamento();
        jj_consume_token(aspas);
        jj_consume_token(NAME);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t1 = servidor_ID();
        jj_consume_token(aspas);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(barra);
      jj_consume_token(maior);
                        for(Server s:servers)
                                if(t1.equals(s.getID()))
                                {
                                        s.setPower(t2);
                                        found = true;
                                }
                        if(!found)
                                for(Master m:masters)
                                        if(t1.equals(m.getID()))
                                        {
                                                m.setPower(t2);
                                                found = true;
                                        }
                        if(!found)
                        {
                                addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+t.endLine+", coluna "+t.endColumn+". Servidor \u005c""+t1+"\u005c" n\u00e3o foi declarado.");
                        }
    } catch (ParseException e) {
                Token t3 = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t3.endLine+", coluna "+t3.endColumn+".");
    }
  }

  static final public void rede() throws ParseException {
        String t1, t2, t3;
        Network n = new Network();
        boolean found = false;
    try {
                 Token t = getToken(1);
      jj_consume_token(menor);
      jj_consume_token(NETWORK_LINK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        jj_consume_token(NAME);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t1 = rede_ID();
        jj_consume_token(aspas);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANDWIDTH:
          jj_consume_token(BANDWIDTH);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t2 = largura_banda();
          jj_consume_token(aspas);
          jj_consume_token(LATENCY);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t3 = latencia();
          jj_consume_token(aspas);
          break;
        case LATENCY:
          jj_consume_token(LATENCY);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t3 = latencia();
          jj_consume_token(aspas);
          jj_consume_token(BANDWIDTH);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t2 = largura_banda();
          jj_consume_token(aspas);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case LATENCY:
        jj_consume_token(LATENCY);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t3 = latencia();
        jj_consume_token(aspas);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANDWIDTH:
          jj_consume_token(BANDWIDTH);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t2 = largura_banda();
          jj_consume_token(aspas);
          jj_consume_token(NAME);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t1 = rede_ID();
          jj_consume_token(aspas);
          break;
        case NAME:
          jj_consume_token(NAME);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t1 = rede_ID();
          jj_consume_token(aspas);
          jj_consume_token(BANDWIDTH);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t2 = largura_banda();
          jj_consume_token(aspas);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case BANDWIDTH:
        jj_consume_token(BANDWIDTH);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t2 = largura_banda();
        jj_consume_token(aspas);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          jj_consume_token(NAME);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t1 = rede_ID();
          jj_consume_token(aspas);
          jj_consume_token(LATENCY);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t3 = latencia();
          jj_consume_token(aspas);
          break;
        case LATENCY:
          jj_consume_token(LATENCY);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t3 = latencia();
          jj_consume_token(aspas);
          jj_consume_token(NAME);
          jj_consume_token(igual);
          jj_consume_token(aspas);
          t1 = rede_ID();
          jj_consume_token(aspas);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(barra);
      jj_consume_token(maior);
                        for(Network testen:networks)
                                if(t1.equals(testen.getID()))
                                {
                                        addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+t.endLine+", coluna "+t.endColumn+". Link \u005c""+t1+"\u005c" j\u00e1 foi declarado.");
                                        found = true;
                                }
                        if(!found)
                        {
                                n.setAtributos(t1, t2, t3);
                                networks.add(n);
                        }
    } catch (ParseException e) {
                Token t4 = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t4.endLine+", coluna "+t4.endColumn+".");
    }
  }

  static final public void roteamento() throws ParseException {
        String t1, t2, t3;
        boolean found = false;
    try {
      jj_consume_token(menor);
      jj_consume_token(ROUTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SRC:
        jj_consume_token(SRC);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t1 = servidor_ID();
        jj_consume_token(aspas);
        jj_consume_token(DST);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t2 = servidor_ID();
        jj_consume_token(aspas);
        break;
      case DST:
        jj_consume_token(DST);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t2 = servidor_ID();
        jj_consume_token(aspas);
        jj_consume_token(SRC);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t1 = servidor_ID();
        jj_consume_token(aspas);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        Token t = getToken(1);
                        for(Server s:servers)
                                if(t1.equals(s.getID()))
                                        found = true;
                        if(!found)
                                for(Master m:masters)
                                        if(t1.equals(m.getID()))
                                                found = true;
                        if(!found)
                        {
                                addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+t.endLine+", coluna "+t.endColumn+". Servidor \u005c""+t1+"\u005c" n\u00e3o foi declarado.");
                        }
                        found = false;
                        Token tt = getToken(1);
                        for(Master m:masters)
                                if(t2.equals(m.getID()))
                                        found = true;
                        for(Server s:servers)
                                if(t2.equals(s.getID()))
                                        found = true;
                        if(!found)
                        {
                                addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+tt.endLine+", coluna "+tt.endColumn+". Servidor \u005c""+t2+"\u005c" n\u00e3o foi declarado.");
                        }
                        found = false;
                 Token ttt = getToken(1);
                String inicio = t1;
      jj_consume_token(maior);
      label_9:
      while (true) {
        jj_consume_token(menor);
        jj_consume_token(ROUTE_ELEMENT);
        jj_consume_token(NAME);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        t3 = rede_ID();
                        for(Network n: networks)
                                if(t3.equals(n.getID()))
                                {
                                    Route achou = null;
                                    for (Route rot : routes) {
                                        if (rot.getID().equals(t3)) {
                                            achou = rot;
                                        }
                                    }
                                    if (achou != null) {
                                        if (achou.getSrc().equals(inicio)) {
                                            achou.setRoute(achou.getNet(), inicio, t2);
                                        } else if (achou.getDst().equals(inicio)) {
                                            net++;
                                            Route novo = new Route();
                                            novo.setAtributos(t3, n.getBand(), n.getLatency());
                                            novo.setRoute(net, inicio, t2);
                                            routes.add(novo);
                                        } else {
                                            achou.setInternet(true);
                                        }
                                    } else {
                                        net++;
                                        Route novo = new Route();
                                        novo.setAtributos(t3, n.getBand(), n.getLatency());
                                        novo.setRoute(net, inicio, t2);
                                        routes.add(novo);
                                    }
                                    for (Route rot : routes) {
                                        if (rot.getID().equals(inicio)) {
                                            rot.setRoute(rot.getNet(), rot.getSrc(), t3);
                                        }
                                    }
                                    inicio = t3;
                                    found = true;
                                }
                        if(!found)
                        {
                                addErroSem(InterpretadorSimGrid.getFileName() + ": Erro na linha "+ttt.endLine+", coluna "+ttt.endColumn+". Link \u005c""+t3+"\u005c" n\u00e3o foi declarado.");
                        }
        jj_consume_token(aspas);
        jj_consume_token(barra);
        jj_consume_token(maior);
        if (jj_2_34(2)) {
          ;
        } else {
          break label_9;
        }
      }
      jj_consume_token(menor);
      jj_consume_token(barra);
      jj_consume_token(ROUTE);
      jj_consume_token(maior);
                    ArrayList<String> itemRede = new ArrayList<String>();
                    for (Network net : networks) {
                        itemRede.add(net.getID());
                    }
                    for (Route net : routes) {
                        //Testando se origem é uma máquina
                        if(!itemRede.contains(net.getSrc()) && itemRede.contains(net.getDst())){
                            for(Route destino : routes) {
                                if(destino.getID().equals(net.getDst())){
                                    destino.setInternet(true);
                                }
                            }
                        }
                        //Testando se destino é uma máquina
                        if(itemRede.contains(net.getSrc()) && !itemRede.contains(net.getDst())){
                            for(Route origem : routes) {
                                if(origem.getID().equals(net.getSrc())){
                                    origem.setInternet(true);
                                }
                            }
                        }
                    }
                    for (Route net : routes) {
                        for (Route linkOrigem : routes) {
                            if(!linkOrigem.isInternet() && net.getSrc().equals(linkOrigem.getID())){
                                for (Route linkDestino : routes) {
                                    if(!linkDestino.isInternet() && net.getDst().equals(linkDestino.getID())){
                                        net.setInternet(true);
                                    }
                                }
                            }
                        }
                    }
    } catch (ParseException e) {
                Token t4 = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t4.endLine+", coluna "+t4.endColumn+".");
    }
  }

  static final public void tasksource() throws ParseException {
    try {
      jj_consume_token(menor);
      jj_consume_token(PROCESS);
      jj_consume_token(HOST);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      servidor_ID();
      jj_consume_token(aspas);
      jj_consume_token(FUNCTION);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      jj_consume_token(TASKSOURCE);
      jj_consume_token(aspas);
      jj_consume_token(maior);
      jj_consume_token(menor);
      jj_consume_token(ARGUMENT);
      jj_consume_token(VALUE);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      inteiro();
      jj_consume_token(aspas);
      jj_consume_token(barra);
      jj_consume_token(maior);
      jj_consume_token(menor);
      jj_consume_token(barra);
      jj_consume_token(PROCESS);
      jj_consume_token(maior);
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static final public void slavecomm() throws ParseException {
    try {
      jj_consume_token(menor);
      jj_consume_token(PROCESS);
      jj_consume_token(HOST);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      servidor_ID();
      jj_consume_token(aspas);
      jj_consume_token(FUNCTION);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      jj_consume_token(SLAVECOMM);
      jj_consume_token(aspas);
      jj_consume_token(barra);
      jj_consume_token(maior);
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static final public void reloadhost() throws ParseException {
    try {
      jj_consume_token(menor);
      jj_consume_token(PROCESS);
      jj_consume_token(HOST);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      servidor_ID();
      jj_consume_token(aspas);
      jj_consume_token(FUNCTION);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      jj_consume_token(RELOADHOST);
      jj_consume_token(aspas);
      jj_consume_token(barra);
      jj_consume_token(maior);
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static final public void forwarderscheduler() throws ParseException {
    try {
      jj_consume_token(menor);
      jj_consume_token(PROCESS);
      jj_consume_token(HOST);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      servidor_ID();
      jj_consume_token(aspas);
      jj_consume_token(FUNCTION);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      jj_consume_token(FORWARDERSCHEDULER);
      jj_consume_token(aspas);
      jj_consume_token(maior);
      jj_consume_token(menor);
      jj_consume_token(ARGUMENT);
      jj_consume_token(VALUE);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      servidor_ID();
      jj_consume_token(aspas);
      jj_consume_token(barra);
      jj_consume_token(maior);
      jj_consume_token(menor);
      jj_consume_token(barra);
      jj_consume_token(PROCESS);
      jj_consume_token(maior);
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static final public void forwardernode() throws ParseException {
    try {
      jj_consume_token(menor);
      jj_consume_token(PROCESS);
      jj_consume_token(HOST);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      servidor_ID();
      jj_consume_token(aspas);
      jj_consume_token(FUNCTION);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      jj_consume_token(FORWARDERNODE);
      jj_consume_token(aspas);
      jj_consume_token(maior);
      label_10:
      while (true) {
        jj_consume_token(menor);
        jj_consume_token(ARGUMENT);
        jj_consume_token(VALUE);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        servidor_ID();
        jj_consume_token(aspas);
        jj_consume_token(barra);
        jj_consume_token(maior);
        if (jj_2_35(2)) {
          ;
        } else {
          break label_10;
        }
      }
      jj_consume_token(menor);
      jj_consume_token(barra);
      jj_consume_token(PROCESS);
      jj_consume_token(maior);
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static final public void forwardercomm() throws ParseException {
    try {
      jj_consume_token(menor);
      jj_consume_token(PROCESS);
      jj_consume_token(HOST);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      servidor_ID();
      jj_consume_token(aspas);
      jj_consume_token(FUNCTION);
      jj_consume_token(igual);
      jj_consume_token(aspas);
      jj_consume_token(FORWARDERCOMM);
      jj_consume_token(aspas);
      jj_consume_token(maior);
      label_11:
      while (true) {
        jj_consume_token(menor);
        jj_consume_token(ARGUMENT);
        jj_consume_token(VALUE);
        jj_consume_token(igual);
        jj_consume_token(aspas);
        servidor_ID();
        jj_consume_token(aspas);
        jj_consume_token(barra);
        jj_consume_token(maior);
        if (jj_2_36(2)) {
          ;
        } else {
          break label_11;
        }
      }
      jj_consume_token(menor);
      jj_consume_token(barra);
      jj_consume_token(PROCESS);
      jj_consume_token(maior);
    } catch (ParseException e) {
                Token t = getToken(1);
                addErroSint(InterpretadorSimGrid.getFileName() + ": Erro sint\u00e1tico na linha "+t.endLine+", coluna "+t.endColumn+".");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_3_15() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    if (jj_3_16()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FORWARDERCOMM)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FORWARDERNODE)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(CPU)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FORWARDERSCHEDULER)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(RELOADHOST)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(SLAVECOMM)) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(TASKSOURCE)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(apostrofo)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(igual)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(maior)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(menor)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(interrogacao)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(exclamacao)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(barra)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(ponto)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(especiais)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(digito)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(letra)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(apostrofo)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(igual)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(maior)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(menor)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(interrogacao)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(exclamacao)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(barra)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(ponto)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(letra)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(especiais)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ROUTE_ELEMENT)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(digito)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ARGUMENT)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ARGUMENT)) return true;
    if (jj_scan_token(VALUE)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(barra)) return true;
    if (jj_scan_token(maior)) return true;
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ARGUMENT)) return true;
    if (jj_scan_token(VALUE)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(barra)) return true;
    if (jj_scan_token(maior)) return true;
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ARGUMENT)) return true;
    if (jj_scan_token(VALUE)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(barra)) return true;
    if (jj_scan_token(maior)) return true;
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ARGUMENT)) return true;
    if (jj_scan_token(VALUE)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(barra)) return true;
    if (jj_scan_token(maior)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ROUTE)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(SLAVE)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(SLAVE)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(MASTER)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    if (jj_scan_token(HOST)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(aspas)) return true;
    if (jj_scan_token(MASTER)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(ponto)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(digito)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ARGUMENT)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(NETWORK_LINK)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(menor)) return true;
    if (jj_scan_token(ARGUMENT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimGridTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000000,0xf8000000,0xf8000000,0xf8000000,0x0,0x0,0x0,0x18000000,0x18000000,0x18000000,0x18000000,0x18000000,0x2000000,0x3000,0x0,0x3000,0x10008,0x30,0x18,0x28,0x38,0x180,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x5f,0x5f,0x5f,0x2,0x30,0x30,0x48,0x40,0x40,0x40,0x40,0x1,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[36];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SimGrid(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimGrid(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimGridTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SimGrid(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimGridTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SimGrid(SimGridTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SimGridTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 36; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }

package yasc.gui;

import yasc.Main;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import org.w3c.dom.Document;
import yasc.arquivo.xml.ConfiguracaoISPD;
import yasc.motor.ProgressoSimulacao;
import yasc.motor.metricas.Metricas;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.JFrame;
import javax.swing.JDialog;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;

/**
 * Realiza faz chamada ao motor de simulação e apresenta os passos realizados e
 * porcentagem da simulação concluida
 */
public class JSimulacao extends JDialog implements Runnable {
    
    private ArrayList<Double> listOutputs = new ArrayList<>();
    
    public JSimulacao(JFrame parent, Document modelo, ConfiguracaoISPD configuracao) {
        super(parent, true);
        this.configuracao = configuracao;
        initComponents();
        this.modelo = modelo;
        
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (threadSim != null) {
                    threadSim.interrupt();
                    threadSim = null;
                }
                dispose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar = new javax.swing.JProgressBar();
        jButtonCancelar = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        jTextPaneNotificacao = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(Main.languageResource.getString("Simulating.")); // NOI18N

        jProgressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        jButtonCancelar.setText(Main.languageResource.getString("Cancel")); // NOI18N
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jTextPaneNotificacao.setEditable(false);
        jTextPaneNotificacao.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jScrollPane.setViewportView(jTextPaneNotificacao);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonCancelar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public ArrayList<Double> getListOutputs() {
        return listOutputs;
    }
    
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        if (this.threadSim != null) {
            this.threadSim.interrupt();
            this.threadSim = null;
        }
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTextPane jTextPaneNotificacao;
    // End of variables declaration//GEN-END:variables
    private final SimpleAttributeSet configuraCor = new SimpleAttributeSet();
    private Thread threadSim;
    private final Document modelo;
    private double porcentagem = 0;
    private ProgressoSimulacao progrSim;
    private final ConfiguracaoISPD configuracao;

    public void iniciarSimulacao() {
        threadSim = new Thread(this);
        threadSim.start();
    }

    @Override
    public void run() {
        this.progrSim = new ProgressoSimulacao() {
            @Override
            public void incProgresso(int n) {
                porcentagem += n;
                int value = (int) porcentagem;
                jProgressBar.setValue(value);
            }

            @Override
            public void print(String text, Color cor) {
                javax.swing.text.Document doc = jTextPaneNotificacao.getDocument();
                try {
                    if (cor != null) {
                        StyleConstants.setForeground(configuraCor, cor);
                    } else {
                        StyleConstants.setForeground(configuraCor, Color.black);
                    }
                    if (Main.languageResource != null && text != null && Main.languageResource.containsKey(text)) {
                        doc.insertString(doc.getLength(), Main.languageResource.getString(text), configuraCor);
                    } else {
                        doc.insertString(doc.getLength(), text, configuraCor);
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(JSimulacao.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        progrSim.println("Simulation Initiated.");
        try {
            // 0%
            Metricas metrica;
            if (configuracao.getSimulationMode() == ConfiguracaoISPD.OPTIMISTIC) {
                int sims = configuracao.getNumberOfSimulations();
                int ths = configuracao.getNumberOfThreads();
                metrica = progrSim.simulacaoOtimista(modelo, ths, sims);
            } else {
                if (configuracao.getNumberOfThreads() == 1) {
                    if (configuracao.getNumberOfSimulations() == 1) {
                        if (JPrincipal.clock == null) {
                            metrica = progrSim.simulacaoSequencial(modelo);//[75%] --> 80%
                        } else {
                            metrica = progrSim.simulacaoDiscreta(modelo);//[75%] --> 80%
                        }
                    } else {
                        int sims = configuracao.getNumberOfSimulations();
                        metrica = progrSim.simulacaoSequencial(modelo, sims);//[75%] --> 80%
                    }
                } else {
                    int sims = configuracao.getNumberOfSimulations();
                    int ths = configuracao.getNumberOfThreads();
                    metrica = progrSim.simulacoesParalelas(modelo, ths, sims);//[75%] --> 80%
                }
            }
            // Apresentar resultados
            progrSim.print("Showing results.");
            progrSim.print(" -> ");
            JPanelResultados janelaResultados = new JPanelResultados(this, metrica, metrica.getRedeDeFilas(), metrica.getTarefas(), configuracao);
            progrSim.incProgresso(20);//[20%] --> 100%
            progrSim.println("OK", Color.green);
            janelaResultados.setLocationRelativeTo(this);
            janelaResultados.setVisible(true);
        } catch (Exception erro) {
            Logger.getLogger(JSimulacao.class.getName()).log(Level.SEVERE, null, erro);
            progrSim.println(erro.getMessage(), Color.red);
            progrSim.print("Simulation Aborted", Color.red);
            progrSim.println("!", Color.red);
        }
    }
}

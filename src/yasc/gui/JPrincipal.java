package yasc.gui;

import yasc.Main;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JToggleButton;
import org.w3c.dom.Document;
import yasc.arquivo.xml.ConfiguracaoISPD;
import yasc.gui.auxiliar.FiltroDeArquivos;
import yasc.gui.configuracao.JPanelConfigIcon;
import yasc.gui.entrada.ListasArmazenamento;
import yasc.gui.entrada.Parser;
import yasc.gui.iconico.Vertice;
import yasc.gui.iconico.grade.DesenhoGrade;
import yasc.gui.iconico.grade.ItemGrade;
import yasc.gui.iconico.simulacao.JSimulacaoGrafica;
import yasc.motor.Clock;

/**
 * Implementação da janela principal do simulador gerado pelo Yasc
 */
public class JPrincipal extends javax.swing.JFrame implements KeyListener {

    public static final LinkedList<Vertice> listOrigin = new LinkedList<>();
    public static Clock clock;
    
    public JPrincipal() throws IOException {
        configura = new ConfiguracaoISPD();
        String[] exts = {".ims", ".imsx", ".wmsx"};
        filtro = new FiltroDeArquivos(Main.languageResource.getString("Iconic Model of Simulation"), exts, true);
        initComponents();
        jToolBarObjetos.revalidate();
        validate();
        jFileChooser.setSelectedFile(configura.getLastFile());
        jSobre = new JSobre(getInstance(), true);
        jSobre.setLocationRelativeTo(getInstance());
        criaBotoes();
        // Permite que o frame processe os eventos de teclado
        addKeyListener(getInstance());
        this.jScrollPaneAreaDesenho.addKeyListener(getInstance());
        this.jScrollPaneBarraLateral.addKeyListener(getInstance());
        this.jScrollPaneBarraNotifica.addKeyListener(getInstance());
        this.jScrollPaneProperties.addKeyListener(getInstance());
        this.jTextAreaNotifica.addKeyListener(getInstance());
        this.jToolBar.addKeyListener(getInstance());
        this.jToggleButtonRede.addKeyListener(getInstance());
        this.jButtonTarefas.addKeyListener(getInstance());
        this.jButtonSimular.addKeyListener(getInstance());
        // Painéis de configuração
        this.jPanelSimples.addKeyListener(getInstance());
        this.jPanelConfiguracao.addKeyListener(getInstance());
        this.jPanelPropriedades.addKeyListener(getInstance());
        clock = null;
        jClock = new JClock(this, true);
    }

    private JPrincipal getInstance() {
        return this;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrameGerenciador = new yasc.gui.GerenciarEscalonador();
        jPanelSimples = new yasc.gui.configuracao.JPanelSimples();
        jPanelSimples.setjLabelTexto(Main.languageResource.getString("No icon selected."));
        jFileChooser = new javax.swing.JFileChooser();
        jPanelConfiguracao = new yasc.gui.configuracao.JPanelConfigIcon();
        jPanelConfiguracao.setEscalonadores(jFrameGerenciador.getEscalonadores());
        jScrollPaneAreaDesenho = new javax.swing.JScrollPane();
        jScrollPaneBarraLateral = new javax.swing.JScrollPane();
        jScrollPaneBarraNotifica = new javax.swing.JScrollPane();
        jTextAreaNotifica = new javax.swing.JTextArea();
        jToolBar = new javax.swing.JToolBar();
        jScrollPaneProperties = new javax.swing.JScrollPane();
        jPanelPropriedades = new yasc.gui.configuracao.JPanelSimples();
        jPanelSimples.setjLabelTexto(Main.languageResource.getString("No icon selected."));
        jScrollPaneObjetos = new javax.swing.JScrollPane();
        jToolBarObjetos = new javax.swing.JToolBar();
        jButtonTarefas = new javax.swing.JButton();
        jButtonTarefas1 = new javax.swing.JButton();
        jButtonTarefas2 = new javax.swing.JButton();
        jButtonSimular = new javax.swing.JButton();
        javax.swing.JToolBar.Separator jSeparator4 = new javax.swing.JToolBar.Separator();
        jToggleButtonRede = new javax.swing.JToggleButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItemNovo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemSalvar = new javax.swing.JMenuItem();
        jMenuItemSalvarComo = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuIdioma = new javax.swing.JMenu();
        jMenuItemIngles = new javax.swing.JMenuItem();
        jMenuItemPortugues = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemFechar = new javax.swing.JMenuItem();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuEditar = new javax.swing.JMenu();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jMenuItemDelete = new javax.swing.JMenuItem();
        jMenuItemOrganizar = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuAjuda = new javax.swing.JMenu();
        jMenuItemAjuda = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSobre = new javax.swing.JMenuItem();

        jFileChooser.setAcceptAllFileFilterUsed(false);
        jFileChooser.setFileFilter(filtro);
        jFileChooser.setFileView(new javax.swing.filechooser.FileView() {@Override
            public Icon getIcon(File f) {
                String ext = null;
                String s = f.getName();
                int i = s.lastIndexOf('.');
                if (i > 0 && i < s.length() - 1) {
                    ext = s.substring(i + 1).toLowerCase();
                }
                if (ext != null) {
                    if (ext.equals("ims") || ext.equals("imsx")) {
                        java.net.URL imgURL = JPrincipal.class.getResource("imagens/Logo_iSPD_25.png");
                        if (imgURL != null) {
                            return new ImageIcon(imgURL);
                        }
                    }
                }
                return null;
            }});

            setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
            setTitle(Main.languageResource.getString("nomePrograma")); // NOI18N
            setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("entrada/imagens/gspd.png")));
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    formWindowClosing(evt);
                }
            });

            jScrollPaneBarraLateral.setBorder(javax.swing.BorderFactory.createTitledBorder(Main.languageResource.getString("Settings"))); // NOI18N

            jScrollPaneBarraNotifica.setBorder(javax.swing.BorderFactory.createTitledBorder(Main.languageResource.getString("Notifications"))); // NOI18N

            jTextAreaNotifica.setEditable(false);
            jTextAreaNotifica.setColumns(20);
            jTextAreaNotifica.setRows(5);
            jTextAreaNotifica.setBorder(null);
            jScrollPaneBarraNotifica.setViewportView(jTextAreaNotifica);

            jToolBar.setFloatable(false);

            jScrollPaneProperties.setBorder(javax.swing.BorderFactory.createTitledBorder(Main.languageResource.getString("Properties"))); // NOI18N
            jScrollPaneProperties.setViewportView(jPanelPropriedades);

            jToolBarObjetos.setBorder(null);
            jToolBarObjetos.setFloatable(false);
            jToolBarObjetos.setMinimumSize(new java.awt.Dimension(260, 50));

            jButtonTarefas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/botao_tarefas.gif"))); // NOI18N
            jButtonTarefas.setToolTipText(Main.languageResource.getString("Insert tasks and failures")); // NOI18N
            jButtonTarefas.setEnabled(false);
            jButtonTarefas.setFocusable(false);
            jButtonTarefas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            jButtonTarefas.setMaximumSize(new java.awt.Dimension(52, 49));
            jButtonTarefas.setMinimumSize(new java.awt.Dimension(52, 49));
            jButtonTarefas.setPreferredSize(new java.awt.Dimension(52, 49));
            jButtonTarefas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            jButtonTarefas.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonTarefasActionPerformed(evt);
                }
            });
            jToolBarObjetos.add(jButtonTarefas);

            jButtonTarefas1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/durativo.gif"))); // NOI18N
            jButtonTarefas1.setToolTipText(Main.languageResource.getString("Insert tasks and failures")); // NOI18N
            jButtonTarefas1.setEnabled(false);
            jButtonTarefas1.setFocusable(false);
            jButtonTarefas1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            jButtonTarefas1.setMaximumSize(new java.awt.Dimension(52, 49));
            jButtonTarefas1.setMinimumSize(new java.awt.Dimension(52, 49));
            jButtonTarefas1.setPreferredSize(new java.awt.Dimension(52, 49));
            jButtonTarefas1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            jButtonTarefas1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonTarefas1ActionPerformed(evt);
                }
            });
            jToolBarObjetos.add(jButtonTarefas1);

            jButtonTarefas2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/insert-object.png"))); // NOI18N
            jButtonTarefas2.setToolTipText(Main.languageResource.getString("Insert tasks and failures")); // NOI18N
            jButtonTarefas2.setEnabled(false);
            jButtonTarefas2.setFocusable(false);
            jButtonTarefas2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            jButtonTarefas2.setMaximumSize(new java.awt.Dimension(52, 49));
            jButtonTarefas2.setMinimumSize(new java.awt.Dimension(52, 49));
            jButtonTarefas2.setPreferredSize(new java.awt.Dimension(52, 49));
            jButtonTarefas2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            jButtonTarefas2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonTarefas2ActionPerformed(evt);
                }
            });
            jToolBarObjetos.add(jButtonTarefas2);

            jButtonSimular.setFont(new java.awt.Font("Ubuntu", 0, 11)); // NOI18N
            jButtonSimular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/system-run.png"))); // NOI18N
            jButtonSimular.setText(Main.languageResource.getString("Simulate")); // NOI18N
            jButtonSimular.setToolTipText(Main.languageResource.getString("Starts the simulation")); // NOI18N
            jButtonSimular.setEnabled(false);
            jButtonSimular.setFocusable(false);
            jButtonSimular.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            jButtonSimular.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            jButtonSimular.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonSimularActionPerformed(evt);
                }
            });
            jToolBarObjetos.add(jButtonSimular);
            jToolBarObjetos.add(jSeparator4);

            jToggleButtonRede.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/Conexao.gif"))); // NOI18N
            jToggleButtonRede.setToolTipText(Main.languageResource.getString("Selects link icon for add to the model")); // NOI18N
            jToggleButtonRede.setEnabled(false);
            jToggleButtonRede.setFocusable(false);
            jToggleButtonRede.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            jToggleButtonRede.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            jToggleButtonRede.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jToggleButtonRedeActionPerformed(evt);
                }
            });
            jToolBarObjetos.add(jToggleButtonRede);

            jScrollPaneObjetos.setViewportView(jToolBarObjetos);

            jMenuArquivo.setText(Main.languageResource.getString("File")); // NOI18N
            jMenuArquivo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuArquivoActionPerformed(evt);
                }
            });

            jMenuItemNovo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
            jMenuItemNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/insert-object_1.png"))); // NOI18N
            jMenuItemNovo.setText(Main.languageResource.getString("New")); // NOI18N
            jMenuItemNovo.setToolTipText(Main.languageResource.getString("Starts a new model")); // NOI18N
            jMenuItemNovo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemNovoActionPerformed(evt);
                }
            });
            jMenuArquivo.add(jMenuItemNovo);

            jMenuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
            jMenuItemAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/document-open.png"))); // NOI18N
            jMenuItemAbrir.setText(Main.languageResource.getString("Open")); // NOI18N
            jMenuItemAbrir.setToolTipText(Main.languageResource.getString("Opens an existing model")); // NOI18N
            jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemAbrirActionPerformed(evt);
                }
            });
            jMenuArquivo.add(jMenuItemAbrir);

            jMenuItemSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
            jMenuItemSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/document-save_1.png"))); // NOI18N
            jMenuItemSalvar.setText(Main.languageResource.getString("Save")); // NOI18N
            jMenuItemSalvar.setToolTipText(Main.languageResource.getString("Save the open model")); // NOI18N
            jMenuItemSalvar.setEnabled(false);
            jMenuItemSalvar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemSalvarActionPerformed(evt);
                }
            });
            jMenuArquivo.add(jMenuItemSalvar);

            jMenuItemSalvarComo.setText(Main.languageResource.getString("Save as")); // NOI18N
            jMenuItemSalvarComo.setEnabled(false);
            jMenuItemSalvarComo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemSalvarComoActionPerformed(evt);
                }
            });
            jMenuArquivo.add(jMenuItemSalvarComo);
            jMenuArquivo.add(jSeparator1);

            jMenuIdioma.setText(Main.languageResource.getString("Language")); // NOI18N

            jMenuItemIngles.setText(Main.languageResource.getString("English")); // NOI18N
            jMenuItemIngles.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemInglesActionPerformed(evt);
                }
            });
            jMenuIdioma.add(jMenuItemIngles);

            jMenuItemPortugues.setText(Main.languageResource.getString("Portuguese")); // NOI18N
            jMenuItemPortugues.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemPortuguesActionPerformed(evt);
                }
            });
            jMenuIdioma.add(jMenuItemPortugues);

            jMenuArquivo.add(jMenuIdioma);
            jMenuArquivo.add(jSeparator2);

            jMenuItemFechar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
            jMenuItemFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/document-close.png"))); // NOI18N
            jMenuItemFechar.setText(Main.languageResource.getString("Close")); // NOI18N
            jMenuItemFechar.setToolTipText(Main.languageResource.getString("Closes the currently open model")); // NOI18N
            jMenuItemFechar.setEnabled(false);
            jMenuItemFechar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemFecharActionPerformed(evt);
                }
            });
            jMenuArquivo.add(jMenuItemFechar);

            jMenuItemSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
            jMenuItemSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/window-close.png"))); // NOI18N
            jMenuItemSair.setText(Main.languageResource.getString("Exit")); // NOI18N
            jMenuItemSair.setToolTipText(Main.languageResource.getString("Closes the program")); // NOI18N
            jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemSairActionPerformed(evt);
                }
            });
            jMenuArquivo.add(jMenuItemSair);

            jMenuBar.add(jMenuArquivo);

            jMenuEditar.setText(Main.languageResource.getString("Edit")); // NOI18N

            jMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
            jMenuItemCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/edit-copy.png"))); // NOI18N
            jMenuItemCopy.setText(Main.languageResource.getString("Copy")); // NOI18N
            jMenuItemCopy.setEnabled(false);
            jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemCopyActionPerformed(evt);
                }
            });
            jMenuEditar.add(jMenuItemCopy);

            jMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
            jMenuItemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/edit-paste.png"))); // NOI18N
            jMenuItemPaste.setText(Main.languageResource.getString("Paste")); // NOI18N
            jMenuItemPaste.setEnabled(false);
            jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemPasteActionPerformed(evt);
                }
            });
            jMenuEditar.add(jMenuItemPaste);

            jMenuItemDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/edit-delete.png"))); // NOI18N
            jMenuItemDelete.setText(Main.languageResource.getString("Delete")); // NOI18N
            jMenuItemDelete.setEnabled(false);
            jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemDeleteActionPerformed(evt);
                }
            });
            jMenuEditar.add(jMenuItemDelete);

            jMenuItemOrganizar.setText(Main.languageResource.getString("Arrange icons")); // NOI18N
            jMenuItemOrganizar.setEnabled(false);
            jMenuItemOrganizar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemOrganizarActionPerformed(evt);
                }
            });
            jMenuEditar.add(jMenuItemOrganizar);
            jMenuEditar.add(jSeparator5);

            jMenuBar.add(jMenuEditar);

            jMenuAjuda.setText(Main.languageResource.getString("Help")); // NOI18N

            jMenuItemAjuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/help-faq.png"))); // NOI18N
            jMenuItemAjuda.setText(Main.languageResource.getString("Help")); // NOI18N
            jMenuItemAjuda.setToolTipText(Main.languageResource.getString("Help")); // NOI18N
            jMenuItemAjuda.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemAjudaActionPerformed(evt);
                }
            });
            jMenuAjuda.add(jMenuItemAjuda);
            jMenuAjuda.add(jSeparator3);

            jMenuItemSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yasc/gui/imagens/help-about.png"))); // NOI18N
            jMenuItemSobre.setText(Main.languageResource.getString("About") + " " + Main.languageResource.getString("nomePrograma"));
            jMenuItemSobre.setToolTipText(Main.languageResource.getString("About") + " " + Main.languageResource.getString("nomePrograma"));
            jMenuItemSobre.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemSobreActionPerformed(evt);
                }
            });
            jMenuAjuda.add(jMenuItemSobre);

            jMenuBar.add(jMenuAjuda);

            setJMenuBar(jMenuBar);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPaneBarraLateral)
                        .addComponent(jScrollPaneProperties, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPaneObjetos)
                        .addComponent(jScrollPaneAreaDesenho)
                        .addComponent(jScrollPaneBarraNotifica, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPaneBarraLateral, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPaneProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(31, 31, 31)
                                    .addComponent(jScrollPaneAreaDesenho, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                                .addComponent(jScrollPaneObjetos, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPaneBarraNotifica, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)))
                    .addContainerGap())
            );

            jScrollPaneBarraLateral.getAccessibleContext().setAccessibleName(Main.languageResource.getString("Settings") ); // NOI18N
            jScrollPaneBarraNotifica.getAccessibleContext().setAccessibleName(Main.languageResource.getString("Notifications") ); // NOI18N
            jScrollPaneProperties.getAccessibleContext().setAccessibleName(Main.languageResource.getString("Properties") ); // NOI18N

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSobreActionPerformed
        jSobre.setVisible(true);
    }//GEN-LAST:event_jMenuItemSobreActionPerformed

    private void jMenuItemInglesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInglesActionPerformed
        // TODO add your handling code here:
        Main.languageResource = ResourceBundle.getBundle("yasc.idioma.Idioma", new Locale("en", "US"));
        initTexts();
    }//GEN-LAST:event_jMenuItemInglesActionPerformed

    private void jMenuItemPortuguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPortuguesActionPerformed
        // TODO add your handling code here:
        Main.languageResource = ResourceBundle.getBundle("yasc.idioma.Idioma", new Locale("pt", "BR"));
        initTexts();
    }//GEN-LAST:event_jMenuItemPortuguesActionPerformed

    private void FilaServidorActionPerformed(ActionEvent event) {
        String id = event.getActionCommand();
        int i = 0, index = -1;
        while (i < ListasArmazenamento.listaCarregamento.size()) {
            if (!id.equals(ListasArmazenamento.listaCarregamento.get(i).getId())) {
                i++;
            } else {
                index = i;
                i = ListasArmazenamento.listaCarregamento.size();
            }
        }
        aDesenho.setIconeSelecionado(DesenhoGrade.FILA_SERVIDOR, id, index);
    }

    private void jMenuItemNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNovoActionPerformed
        int escolha = JOptionPane.YES_OPTION;
        if (modificado) {
            escolha = savarAlteracao();
        }
        if (escolha != JOptionPane.CANCEL_OPTION && escolha != JOptionPane.CLOSED_OPTION) {
            try {
                aDesenho = new DesenhoGrade(1500, 1500);
            } catch (IOException ex) {
                Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            aDesenho.addKeyListener(this);
            aDesenho.setPaineis(this);
            jScrollPaneBarraLateral.setViewportView(null);
            jPanelPropriedades.setjLabelTexto("");
            jScrollPaneAreaDesenho.setViewportView(aDesenho);
            appendNotificacao(Main.languageResource.getString("New model opened"));
            abrirEdição(null);
            modificar();
        }
    }//GEN-LAST:event_jMenuItemNovoActionPerformed
    
    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
        // TODO add your handling code here:
        int escolha = JOptionPane.YES_OPTION;
        if (modificado) {
            escolha = savarAlteracao();
        }
        if (escolha != JOptionPane.CANCEL_OPTION && escolha != JOptionPane.CLOSED_OPTION) {
            filtro.setDescricao(Main.languageResource.getString("Iconic Model of Simulation"));
            String[] exts = {".ims", ".imsx"};
            filtro.setExtensao(exts);
            if (Locale.getDefault().equals(Locale.ENGLISH)) {
                JFileChooser.setDefaultLocale(Locale.ENGLISH);
            }
            jFileChooser.setAcceptAllFileFilterUsed(false);
            int returnVal = jFileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = jFileChooser.getSelectedFile();
                // This is where a real application would open the file.
                // Abrir arquivo.
                if (file.getName().endsWith(".imsx")) {
                    try {
                        // Realizar leitura do arquivoo xml...
                        Document descricao = yasc.arquivo.xml.IconicoXML.ler(file);
                        // Carregar na aDesenho
                        aDesenho = new DesenhoGrade(1500, 1500);
                        aDesenho.setGrade(descricao);
                        aDesenho.setUpdateLinks(true);
                        aDesenho.addKeyListener(this);
                        aDesenho.setPaineis(this);
                        jEntradas = new JEntradas(this, false, aDesenho, listOrigin);
                        jScrollPaneBarraLateral.setViewportView(null);
                        jPanelPropriedades.setjLabelTexto("");
                        jScrollPaneAreaDesenho.setViewportView(aDesenho);
                        appendNotificacao(Main.languageResource.getString("model opened"));
                        abrirEdição(file);
                    } catch (Exception ex) {
                        Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, Main.languageResource.getString("Error opening file.") + "\n" + ex.getMessage(), Main.languageResource.getString("WARNING"), JOptionPane.PLAIN_MESSAGE);
                    }
                } else {
                    if ("Torre".equals(jFileChooser.getSelectedFile().getName())) {
                        jScrollPaneAreaDesenho.setViewportView(new yasc.gui.auxiliar.Stalemate());
                    } else {
                        JOptionPane.showMessageDialog(null, Main.languageResource.getString("Invalid file"), Main.languageResource.getString("WARNING"), JOptionPane.PLAIN_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jMenuItemSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalvarActionPerformed
        // TODO add your handling code here:
        if (arquivoAberto == null) {
            jMenuItemSalvarComoActionPerformed(null);
        } else if (aDesenho != null /*&& modificado*/) {
            //Implementar ações para salvar conteudo
            Document docxml = aDesenho.getGrade();
            yasc.arquivo.xml.IconicoXML.escrever(docxml, arquivoAberto);
            appendNotificacao(Main.languageResource.getString("model saved"));
            salvarModificacao();
        }
    }//GEN-LAST:event_jMenuItemSalvarActionPerformed

    private void jMenuItemFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFecharActionPerformed
        // TODO add your handling code here:
        int escolha = JOptionPane.YES_OPTION;
        if (modificado) {
            escolha = savarAlteracao();
        }
        if (escolha != JOptionPane.CANCEL_OPTION && escolha != JOptionPane.CLOSED_OPTION) {
            jScrollPaneAreaDesenho.setViewportView(null);
            jScrollPaneBarraLateral.setViewportView(null);
            jPanelPropriedades.setjLabelTexto("");
            appendNotificacao(Main.languageResource.getString("model closed"));
            fecharEdicao();
        }
    }//GEN-LAST:event_jMenuItemFecharActionPerformed

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        formWindowClosing(null);
    }//GEN-LAST:event_jMenuItemSairActionPerformed

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        // TODO add your handling code here:
        if (aDesenho != null) {
            aDesenho.botaoPainelActionPerformed(evt);
        }
}//GEN-LAST:event_jMenuItemPasteActionPerformed

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
        // TODO add your handling code here:
        if (aDesenho != null) {
            aDesenho.botaoIconeActionPerformed(evt);
        }
}//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        // TODO add your handling code here:
        if (aDesenho != null) {
            aDesenho.botaoVerticeActionPerformed(evt);
        }
}//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAjudaActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Not supported yet");
    }//GEN-LAST:event_jMenuItemAjudaActionPerformed

    private void jMenuItemSalvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalvarComoActionPerformed
        // TODO add your handling code here:
        if (aDesenho != null) {
            // Escolher o arquivo
            filtro.setDescricao(Main.languageResource.getString("Iconic Model of Simulation"));
            filtro.setExtensao(".imsx");
            jFileChooser.setAcceptAllFileFilterUsed(false);
            int returnVal = jFileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = jFileChooser.getSelectedFile();
                if (!file.getName().endsWith(".imsx")) {
                    File temp = new File(file.toString() + ".imsx");
                    file = temp;
                }
                // Implementar ações para salvar conteudo
                Document docxml = aDesenho.getGrade();
                yasc.arquivo.xml.IconicoXML.escrever(docxml, file);
                appendNotificacao(Main.languageResource.getString("model saved"));
                abrirEdição(file);
            }
        }
    }//GEN-LAST:event_jMenuItemSalvarComoActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        configura.setLastFile(arquivoAberto);
        configura.save();
        if (modificado) {
            int escolha = savarAlteracao();
            if (escolha != JOptionPane.CANCEL_OPTION && escolha != JOptionPane.CLOSED_OPTION) {
                System.exit(0);
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuArquivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuArquivoActionPerformed
    
    // Ação do item "Arranjar Ícones"
    private void jMenuItemOrganizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrganizarActionPerformed
        // TODO add your handling code here:
        if (aDesenho != null) {
            if (jMenuItemOrganizar.getDisplayedMnemonicIndex() == 2) {
                jMenuItemOrganizar.setDisplayedMnemonicIndex(1);
                aDesenho.iconArrange();
            } else {
                jMenuItemOrganizar.setDisplayedMnemonicIndex(2);
                aDesenho.iconArrange();
            }
            aDesenho.repaint();
        }
    }//GEN-LAST:event_jMenuItemOrganizarActionPerformed

    // Ação do ícone de "Link"
    private void jToggleButtonRedeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRedeActionPerformed
        // Desativa outros botões
        for (int k = 0; k < ListasArmazenamento.listaCarregamento.size(); k++) {
            BotoesObjetos[k].setSelected(false);
        }
        if (jToggleButtonRede.isSelected()) {
            aDesenho.setIconeSelecionado(DesenhoGrade.NETWORK, "", -1);
            appendNotificacao(Main.languageResource.getString("Link button selected."));
        } else {
            aDesenho.setIconeSelecionado(null, "", -1);
        }
    }//GEN-LAST:event_jToggleButtonRedeActionPerformed

    // Ação do ícone "Simular"
    private void jButtonSimularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSimularActionPerformed
        javax.swing.JDialog janelaSimulacao;
        if (configura.getSimulationMode() == ConfiguracaoISPD.DEFAULT || configura.getSimulationMode() == ConfiguracaoISPD.OPTIMISTIC) {
            janelaSimulacao = new JSimulacao(this, aDesenho.getGrade(), configura);
            ((JSimulacao) janelaSimulacao).iniciarSimulacao();
        } else {
            janelaSimulacao = new JSimulacaoGrafica(this, aDesenho.getGrade(), configura);
            ((JSimulacaoGrafica) janelaSimulacao).iniciarSimulacao();
        }
        janelaSimulacao.setLocationRelativeTo(this);
        janelaSimulacao.setVisible(true);
        appendNotificacao(Main.languageResource.getString("Simulate button added."));
    }//GEN-LAST:event_jButtonSimularActionPerformed

    // Ação do ícone "Tarefas"
    private void jButtonTarefasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTarefasActionPerformed
        // TODO add your handling code here:
        if (aDesenho != null) {
            SelecionaCargas carga = new SelecionaCargas(this, true,
                    aDesenho.getCargasConfiguracao(), aDesenho);
            carga.setLocationRelativeTo(this);
            carga.setVisible(true);
            aDesenho.setCargasConfiguracao(carga.getCargasConfiguracao());
            modificar();
        }
    }//GEN-LAST:event_jButtonTarefasActionPerformed

    // Ação do ícone de relógio
    private void jButtonTarefas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTarefas1ActionPerformed
        // TODO add your handling code here:
        if (aDesenho != null) {
            jClock.setLocationRelativeTo(null);
            jClock.setVisible(true);
        }
    }//GEN-LAST:event_jButtonTarefas1ActionPerformed

    private void jButtonTarefas2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTarefas2ActionPerformed
        // TODO add your handling code here:
        if (clock != null) {
            jEntradas.inicializar();
            jEntradas.setLocationRelativeTo(null);
            jEntradas.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, primeiro configure o relógio.");
        }
    }//GEN-LAST:event_jButtonTarefas2ActionPerformed

    private void FilaServidoresActionPerformed(ActionEvent event) {
        String id = event.getActionCommand();
        int i = 0, index = -1;
        while (i < ListasArmazenamento.listaCarregamento.size()) {
            if (!id.equals(ListasArmazenamento.listaCarregamento.get(i).getId())) {
                i++;
            } else {
                index = i;
                i = ListasArmazenamento.listaCarregamento.size();
            }
        }
        aDesenho.setIconeSelecionado(DesenhoGrade.FILA_SERVIDORES, id, index);
    }

    private void ServidorInfinitoActionPerformed(ActionEvent event) {
        String id = event.getActionCommand();
        int i = 0, index = -1;
        while (i < ListasArmazenamento.listaCarregamento.size()) {
            if (!id.equals(ListasArmazenamento.listaCarregamento.get(i).getId())) {
                i++;
            } else {
                index = i;
                i = ListasArmazenamento.listaCarregamento.size();
            }
        }
        aDesenho.setIconeSelecionado(DesenhoGrade.SERVIDOR_INFINITO, id, index);
    }

    private void FilasServidorActionPerformed(ActionEvent event) {
        String id = event.getActionCommand();
        int i = 0, index = -1;
        while (i < ListasArmazenamento.listaCarregamento.size()) {
            if (!id.equals(ListasArmazenamento.listaCarregamento.get(i).getId())) {
                i++;
            } else {
                index = i;
                i = ListasArmazenamento.listaCarregamento.size();
            }
        }
        aDesenho.setIconeSelecionado(DesenhoGrade.FILAS_SERVIDOR, id, i);
    }

    private void FilasServidoresActionPerformed(ActionEvent event) {
        String id = event.getActionCommand();
        int i = 0, index = -1;
        while (i < ListasArmazenamento.listaCarregamento.size()) {
            if (!id.equals(ListasArmazenamento.listaCarregamento.get(i).getId())) {
                i++;
            } else {
                index = i;
                i = ListasArmazenamento.listaCarregamento.size();
            }
        }
        aDesenho.setIconeSelecionado(DesenhoGrade.FILAS_SERVIDORES, id, index);
    }

    private void InstantaneoActionPerformed(ActionEvent event) {
        String id = event.getActionCommand();
        int i = 0, index = -1;
        while (i < ListasArmazenamento.listaCarregamento.size()) {
            if (!id.equals(ListasArmazenamento.listaCarregamento.get(i).getId())) {
                i++;
            } else {
                index = i;
                i = ListasArmazenamento.listaCarregamento.size();
            }
        }
        aDesenho.setIconeSelecionado(DesenhoGrade.INSTANTANEO, id, index);
    }

    private void DurativoActionPerformed(ActionEvent event) {
        String id = event.getActionCommand();
        int i = 0, index = -1;
        while (i < ListasArmazenamento.listaCarregamento.size()) {
            if (!id.equals(ListasArmazenamento.listaCarregamento.get(i).getId())) {
                i++;
            } else {
                index = i;
                i = ListasArmazenamento.listaCarregamento.size();
            }
        }
        aDesenho.setIconeSelecionado(DesenhoGrade.DURATIVO, id, index);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSimular;
    private javax.swing.JButton jButtonTarefas;
    private javax.swing.JButton jButtonTarefas1;
    private javax.swing.JButton jButtonTarefas2;
    private javax.swing.JFileChooser jFileChooser;
    private yasc.gui.GerenciarEscalonador jFrameGerenciador;
    private javax.swing.JMenu jMenuAjuda;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEditar;
    private javax.swing.JMenu jMenuIdioma;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemAjuda;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemFechar;
    private javax.swing.JMenuItem jMenuItemIngles;
    private javax.swing.JMenuItem jMenuItemNovo;
    private javax.swing.JMenuItem jMenuItemOrganizar;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemPortugues;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSalvar;
    private javax.swing.JMenuItem jMenuItemSalvarComo;
    private javax.swing.JMenuItem jMenuItemSobre;
    private yasc.gui.configuracao.JPanelConfigIcon jPanelConfiguracao;
    private yasc.gui.configuracao.JPanelSimples jPanelPropriedades;
    private yasc.gui.configuracao.JPanelSimples jPanelSimples;
    private javax.swing.JScrollPane jScrollPaneAreaDesenho;
    private javax.swing.JScrollPane jScrollPaneBarraLateral;
    private javax.swing.JScrollPane jScrollPaneBarraNotifica;
    private javax.swing.JScrollPane jScrollPaneObjetos;
    private javax.swing.JScrollPane jScrollPaneProperties;
    private javax.swing.JTextArea jTextAreaNotifica;
    private javax.swing.JToggleButton jToggleButtonRede;
    private javax.swing.JToolBar jToolBar;
    private javax.swing.JToolBar jToolBarObjetos;
    // End of variables declaration//GEN-END:variables

    // Indica se arquivo atual foi modificado
    private boolean modificado = false;
    private File arquivoAberto = null;
    private DesenhoGrade aDesenho = null;
    private final FiltroDeArquivos filtro;
    private final JSobre jSobre;
    private final ConfiguracaoISPD configura;
    private final JClock jClock;
    private JEntradas jEntradas = null;
    private JPopupMenu FilaServidor;
    private JPopupMenu FilasServidor;
    private JPopupMenu FilasServidores;
    private JPopupMenu FilaServidores;
    private JPopupMenu ServidorInfinito;
    private JPopupMenu Durativo;
    private JPopupMenu Instantaneo;
    private final javax.swing.JToggleButton BotoesObjetos[] = new JToggleButton[ListasArmazenamento.listaCarregamento.size()];

    public JPanelConfigIcon getjPanelConfiguracao() {
        return jPanelConfiguracao;
    }

    // Define rótulos no idioma definido
    private void initTexts() {
        jScrollPaneBarraLateral.setBorder(javax.swing.BorderFactory.createTitledBorder(Main.languageResource.getString("Settings")));
        jScrollPaneProperties.setBorder(javax.swing.BorderFactory.createTitledBorder(Main.languageResource.getString("Properties")));
        jScrollPaneBarraNotifica.setBorder(javax.swing.BorderFactory.createTitledBorder(Main.languageResource.getString("Notifications")));

        jToggleButtonRede.setToolTipText(Main.languageResource.getString("Selects link icon for add to the model"));
        jButtonTarefas.setToolTipText(Main.languageResource.getString("Selects insertion model of tasks")); // NOI18N
        jButtonSimular.setText(Main.languageResource.getString("Simulate")); // NOI18N
        jButtonSimular.setToolTipText(Main.languageResource.getString("Starts the simulation"));

        jMenuArquivo.setText(Main.languageResource.getString("File")); // NOI18N
        jMenuItemNovo.setText(Main.languageResource.getString("New")); // NOI18N
        jMenuItemNovo.setToolTipText(Main.languageResource.getString("Starts a new model")); // NOI18N
        jMenuItemAbrir.setText(Main.languageResource.getString("Open")); // NOI18N
        jMenuItemSalvarComo.setText(Main.languageResource.getString("Save as")); //NOI18N
        jMenuItemOrganizar.setText(Main.languageResource.getString("Arrange icons")); //NOI18N
        jMenuItemAbrir.setToolTipText(Main.languageResource.getString("Opens an existing model")); // NOI18N
        jMenuItemSalvar.setText(Main.languageResource.getString("Save")); // NOI18N
        jMenuItemSalvar.setToolTipText(Main.languageResource.getString("Save the open model")); // NOI18N
        jMenuIdioma.setText(Main.languageResource.getString("Language")); // NOI18N
        jMenuItemIngles.setText(Main.languageResource.getString("English")); // NOI18N
        jMenuItemPortugues.setText(Main.languageResource.getString("Portuguese")); // NOI18N
        jMenuItemFechar.setText(Main.languageResource.getString("Close")); // NOI18N
        jMenuItemFechar.setToolTipText(Main.languageResource.getString("Closes the currently open model")); // NOI18N
        jMenuItemSair.setText(Main.languageResource.getString("Exit")); // NOI18N
        jMenuItemSair.setToolTipText(Main.languageResource.getString("Closes the program")); // NOI18N

        jMenuEditar.setText(Main.languageResource.getString("Edit")); // NOI18N
        jMenuItemCopy.setText(Main.languageResource.getString("Copy")); // NOI18N
        jMenuItemPaste.setText(Main.languageResource.getString("Paste")); // NOI18N
        jMenuItemDelete.setText(Main.languageResource.getString("Delete")); // NOI18N
        jMenuAjuda.setText(Main.languageResource.getString("Help"));
        jMenuItemAjuda.setText(Main.languageResource.getString("Help"));
        jMenuItemAjuda.setToolTipText(Main.languageResource.getString("Help"));
        jMenuItemSobre.setText(Main.languageResource.getString("About") + " " + Main.languageResource.getString("nomePrograma"));
        jMenuItemSobre.setToolTipText(Main.languageResource.getString("About") + " " + Main.languageResource.getString("nomePrograma"));

        jPanelSimples.setjLabelTexto(Main.languageResource.getString("No icon selected."));
    }

    /**
     * Cria os botões correspondentes aos objetos criados
     * @throws IOException 
     */
    private void criaBotoes() throws IOException {
        try{
            int numberOfButtons = ListasArmazenamento.listaCarregamento.size();
            ArrayList<Parser> list = ListasArmazenamento.listaCarregamento;

            for (int i = 0; i < numberOfButtons; i++) {
                BotoesObjetos[i] = new JToggleButton();
                BotoesObjetos[i].setToolTipText(list.get(i).getId());
                BotoesObjetos[i].setActionCommand(list.get(i).getId());
                BotoesObjetos[i].setFocusable(false);
                BotoesObjetos[i].setEnabled(false);
                BotoesObjetos[i].addKeyListener(this);
                BotoesObjetos[i].addActionListener((java.awt.event.ActionEvent evt) -> {
                    BotoesObjetosActionPerformed(evt);
                });
                jToolBarObjetos.add(BotoesObjetos[i]);

                if (list.get(i).getGraphicRepresentation().equals("-")) {
                    if (list.get(i).isFila()) {
                        switch (list.get(i).getFilaTipo()) {
                            case "One_queue_one_server":
                                BotoesObjetos[i].setIcon(new javax.swing.ImageIcon(JPrincipal.class.getResource("imagens/fila1.gif")));
                                break;
                            case "One_queue_multiple_servers":
                                BotoesObjetos[i].setIcon(new javax.swing.ImageIcon(JPrincipal.class.getResource("imagens/fila3.gif")));
                                break;
                            case "Multiple_queues_multiple_servers":
                                BotoesObjetos[i].setIcon(new javax.swing.ImageIcon(JPrincipal.class.getResource("imagens/fila2.gif")));
                                break;
                            case "Multiple_queues_one_server":
                                BotoesObjetos[i].setIcon(new javax.swing.ImageIcon(JPrincipal.class.getResource("imagens/fila4.gif")));
                                break;
                            case "Infinity_Server":
                                BotoesObjetos[i].setIcon(new javax.swing.ImageIcon(JPrincipal.class.getResource("imagens/fila5.gif")));
                                break;
                        }
                    } else if (list.get(i).isDurativo()) {
                        BotoesObjetos[i].setIcon(new javax.swing.ImageIcon(JPrincipal.class.getResource("imagens/durativo.gif")));
                    } else if (list.get(i).isInstantaneo()) {
                        BotoesObjetos[i].setIcon(new javax.swing.ImageIcon(JPrincipal.class.getResource("imagens/instantaneo.gif")));
                    }
                } else if (list.get(i).getGraphicRepresentation().equals("__AND_LOGIC_GATE")) {
                    BotoesObjetos[i].setText("AND");
                } else if (list.get(i).getGraphicRepresentation().equals("__OR_LOGIC_GATE")) {
                    BotoesObjetos[i].setText("OR");
                } else if (list.get(i).getGraphicRepresentation().equals("__XOR_LOGIC_GATE")) {
                    BotoesObjetos[i].setText("XOR");
                } else if (list.get(i).getGraphicRepresentation().equals("__NOT_LOGIC_GATE")) {
                    BotoesObjetos[i].setText("NOT");
                } else {
                    Image image = ImageIO.read(new File(list.get(i).getGraphicRepresentation()));
                    BotoesObjetos[i] = new JToggleButton(new javax.swing.ImageIcon(image));
                }
            }
        }
        catch(Exception ex)
        {

        }
        
    }

    /**
     * Ação do botão
     * @param evt 
     */
    private void BotoesObjetosActionPerformed(ActionEvent evt) {
        int x = 0;
        // Verifica qual botão foi acionado
        for (int k = 0; k < ListasArmazenamento.listaCarregamento.size(); k++) {
            if (!BotoesObjetos[k].getActionCommand().equals(evt.getActionCommand())) {
                BotoesObjetos[k].setSelected(false);
            } else {
                x = k;
            }
        }
        // Realiza ação
        if (BotoesObjetos[x].isSelected()) {
            String id = BotoesObjetos[x].getActionCommand();
            int index = x;
            if (ListasArmazenamento.listaCarregamento.get(index).isFila()) {
                switch (ListasArmazenamento.listaCarregamento.get(index).getFilaTipo()) {
                    case "One_queue_one_server":
                        aDesenho.setIconeSelecionado(DesenhoGrade.FILA_SERVIDOR, id, index);
                        break;
                    case "One_queue_multiple_servers":
                        aDesenho.setIconeSelecionado(DesenhoGrade.FILA_SERVIDORES, id, index);
                        break;
                    case "Multiple_queues_multiple_servers":
                        aDesenho.setIconeSelecionado(DesenhoGrade.FILAS_SERVIDORES, id, index);
                        break;
                    case "Multiple_queues_one_server":
                        aDesenho.setIconeSelecionado(DesenhoGrade.FILAS_SERVIDOR, id, index);
                        break;
                    case "Infinity_Server":
                        aDesenho.setIconeSelecionado(DesenhoGrade.SERVIDOR_INFINITO, id, index);
                        break;
                }
            } else if (ListasArmazenamento.listaCarregamento.get(index).isDurativo()) {
                aDesenho.setIconeSelecionado(DesenhoGrade.DURATIVO, id, index);
            } else if (ListasArmazenamento.listaCarregamento.get(index).isInstantaneo()) {
                aDesenho.setIconeSelecionado(DesenhoGrade.INSTANTANEO, id, index);
            }
        } else {
            aDesenho.setIconeSelecionado(null, null, -1);
        }
    }

    public void appendNotificacao(String text) {
        jTextAreaNotifica.append(text + "\n");
    }

    /**
     * Indica que houve alterações no modelo aberto
     */
    public void modificar() {
        if (arquivoAberto == null) {
            this.setTitle("New_Model.ims [" + Main.languageResource.getString("modified") + "] - " + Main.languageResource.getString("nomePrograma"));
        } else {
            this.setTitle(arquivoAberto.getName() + " [" + Main.languageResource.getString("modified") + "] - " + Main.languageResource.getString("nomePrograma"));
        }
        this.modificado = true;
    }

    public void salvarModificacao() {
        if (arquivoAberto == null) {
            this.setTitle("New_Model.ims - " + Main.languageResource.getString("nomePrograma"));
        } else {
            this.setTitle(arquivoAberto.getName() + " - " + Main.languageResource.getString("nomePrograma"));
        }
        this.modificado = false;
    }

    private int savarAlteracao() {
        int escolha;
        if (Locale.getDefault().equals(Locale.ENGLISH)) {
            JOptionPane.setDefaultLocale(Locale.ENGLISH);
        }
        if (arquivoAberto != null) {
            escolha = JOptionPane.showConfirmDialog(this, Main.languageResource.getString("Do you want to save changes to") + " " + arquivoAberto.getName());
        } else {
            escolha = JOptionPane.showConfirmDialog(this, Main.languageResource.getString("Do you want to save changes to") + " New_Model.ims?");
        }
        if (escolha == JOptionPane.YES_OPTION) {
            // Implementar ações para salvar conteudo
            jMenuItemSalvarActionPerformed(null);
            salvarModificacao();
        }
        return escolha;
    }

    private void abrirEdição(File arquivo) {
        this.arquivoAberto = arquivo;
        // Tirar seleção dos botões de icones
        jToggleButtonRede.setSelected(false);
        setObjetosEnabled(true);
        salvarModificacao();
    }

    private void fecharEdicao() {
        this.setTitle(Main.languageResource.getString("nomePrograma"));
        this.arquivoAberto = null;
        setObjetosEnabled(false);
        this.modificado = false;
        // Remove a régua
        jScrollPaneAreaDesenho.setColumnHeaderView(null);
        jScrollPaneAreaDesenho.setRowHeaderView(null);
        jScrollPaneAreaDesenho.setCorner(JScrollPane.UPPER_LEFT_CORNER, null);
        jScrollPaneAreaDesenho.setCorner(JScrollPane.LOWER_LEFT_CORNER, null);
        jScrollPaneAreaDesenho.setCorner(JScrollPane.UPPER_RIGHT_CORNER, null);
    }

    // Habilita/Desabilita botões
    private void setObjetosEnabled(boolean opcao) {
        // Icones
        for (int i = 0; i < ListasArmazenamento.listaCarregamento.size(); i++) {
            BotoesObjetos[i].setEnabled(opcao);
        }
        jToggleButtonRede.setEnabled(opcao);
        jButtonSimular.setEnabled(opcao);
        jButtonTarefas.setEnabled(opcao);
        jButtonTarefas1.setEnabled(opcao);
        jButtonTarefas2.setEnabled(opcao);
        // Arquivo
        jMenuItemSalvar.setEnabled(opcao);
        jMenuItemSalvarComo.setEnabled(opcao);
        jMenuItemFechar.setEnabled(opcao);
        // Editar
        jMenuItemOrganizar.setEnabled(opcao);
        jMenuItemCopy.setEnabled(opcao);
        jMenuItemPaste.setEnabled(opcao);
        jMenuItemDelete.setEnabled(opcao);
    }

    @Override
    public void keyTyped(KeyEvent e) { }

    /**
     * Verifica qual tecla foi acionada e realiza a ação
     */
    @Override
    public void keyPressed(KeyEvent evt) {
        if (aDesenho != null) {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                aDesenho.botaoIconeActionPerformed(null);
            }
            if (evt.getModifiers() == InputEvent.CTRL_MASK && evt.getKeyCode() == KeyEvent.VK_C) {
                aDesenho.botaoVerticeActionPerformed(null);
            }
            if (evt.getModifiers() == InputEvent.CTRL_MASK && evt.getKeyCode() == KeyEvent.VK_V) {
                aDesenho.botaoPainelActionPerformed(null);
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) { }

    public void setSelectedIcon(ItemGrade icon, String Texto) {
        if (icon != null) {
            if (icon instanceof yasc.gui.iconico.grade.Machine || icon instanceof yasc.gui.iconico.grade.Cluster) {
                this.jPanelConfiguracao.setIcone(icon, aDesenho.getUsuarios());
            } else {
                this.jPanelConfiguracao.setIcone(icon);
            }
            jScrollPaneBarraLateral.setViewportView(jPanelConfiguracao);
            this.jPanelPropriedades.setjLabelTexto(Texto);
        } else {
            jScrollPaneBarraLateral.setViewportView(jPanelSimples);
            jPanelPropriedades.setjLabelTexto("");
        }
    }
}

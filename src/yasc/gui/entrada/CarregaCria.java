package yasc.gui.entrada;

import yasc.Main;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import yasc.gui.JPrincipal;
import yasc.gui.LogExceptions;

public class CarregaCria extends javax.swing.JFrame {

    Parser tableCarregar;

    public CarregaCria() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnNewSimulator = new javax.swing.JButton();
        btnOpenSimulator = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Yasc");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("imagens/gspd.png")));
        setResizable(false);

        jPanel1.setLayout(new java.awt.GridLayout());

        btnNewSimulator.setText(Main.languageResource.getString("Create a new simulator"));
        btnNewSimulator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewSimulatorActionPerformed(evt);
            }
        });

        btnOpenSimulator.setText(Main.languageResource.getString("Use an existent simulator"));
        btnOpenSimulator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenSimulatorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNewSimulator, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOpenSimulator, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnNewSimulator)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnOpenSimulator)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Se o botão para usar um simulador existente for clicado
    private void btnOpenSimulatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenSimulatorActionPerformed

        if (evt.getSource() == btnOpenSimulator) {
            if (Locale.getDefault().equals(Locale.ENGLISH)) {
                JFileChooser.setDefaultLocale(Locale.ENGLISH);
            }

            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new FileNameExtensionFilter("Config files", "conf"));
            chooser.setAcceptAllFileFilterUsed(false);
            // showSaveDialog retorna um inteiro, e ele ira determinar que o chooser será para salvar.
            int retorno = chooser.showOpenDialog(null);

            if (retorno == 0) {
                if (retorno == JFileChooser.APPROVE_OPTION) {
                    leituraArquivo(chooser.getSelectedFile().getAbsolutePath());
                }
                this.setVisible(false);
                LogExceptions logExceptions = new LogExceptions(null);
                JPrincipal gui;
                try {
                    gui = new JPrincipal();
                    gui.setLocationRelativeTo(null);
                    logExceptions.setParentComponent(gui);
                    gui.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(CarregaCria.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_btnOpenSimulatorActionPerformed

    private void btnNewSimulatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewSimulatorActionPerformed
        if (evt.getSource() == btnNewSimulator) {
            Gerar dialog = new Gerar();
            this.setVisible(false);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_btnNewSimulatorActionPerformed

    public void leituraArquivo(String arq) {
        try {
            BufferedReader lerArq = new BufferedReader(new FileReader(arq));
            String linha = lerArq.readLine(); // lê a primeira linha
            // A variável "linha" recebe o valor "null" quando o processo de repetição atingir o final do arquivo texto 
            while (linha != null) {
                String[] b = linha.split(" ");

                switch (b[0]) {
                    case "1":
                        tableCarregar = new Parser("", "", new ArrayList<>(), 
                                new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), 
                                new ArrayList<>(), false, false, false, false, false, false, 
                                "", "", "", "", "", new ArrayList<>(), new ArrayList<>(), 
                                new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
                        tableCarregar.setId(b[1]);
                        tableCarregar.setGraphicRepresentation(b[2]);
                        tableCarregar.setFila(true);
                        tableCarregar.setFilaTipo(b[3]);
                        
                        switch (b[3]) {
                            case "One_queue_one_server":
                                for (int j = 0; j < 2; j++) {
                                    linha = lerArq.readLine();
                                    String[] c = linha.split(" ");
                                    if (c[0].equals("a")) {
                                        tableCarregar.getLabels().add(c[1]);
                                        tableCarregar.getMetricas().add(c[2]);
                                        if (j == 1) {
                                            if ("NonDeterministic".equals(c[3])) {
                                                tableCarregar.setNDeterministico(true);
                                            }
                                        }
                                    }
                                }
                                break;
                            case "Multiple_queues_one_server":
                                for (int j = 0; j < 3; j++) {
                                    linha = lerArq.readLine();
                                    String[] c = linha.split(" ");
                                    if (c[0].equals("a")) {
                                        tableCarregar.getLabels().add(c[1]);
                                        tableCarregar.getMetricas().add(c[2]);
                                        if (j == 1) {
                                            if ("NonDeterministic".equals(c[3])) {
                                                tableCarregar.setNDeterministico(true);
                                            }
                                        }
                                    }
                                }
                                break;
                            case "Multiple_queues_multiple_servers":
                                for (int j = 0; j < 4; j++) {
                                    linha = lerArq.readLine();
                                    String[] c = linha.split(" ");
                                    if (c[0].equals("a")) {
                                        tableCarregar.getLabels().add(c[1]);
                                        tableCarregar.getMetricas().add(c[2]);
                                        if (j == 1) {
                                            if ("NonDeterministic".equals(c[3])) {
                                                tableCarregar.setNDeterministico(true);
                                            }
                                        }
                                    }
                                }
                                break;
                            case "One_queue_multiple_servers":
                                for (int j = 0; j < 3; j++) {
                                    linha = lerArq.readLine();
                                    String[] c = linha.split(" ");
                                    if (c[0].equals("a")) {
                                        tableCarregar.getLabels().add(c[1]);
                                        tableCarregar.getMetricas().add(c[2]);
                                        if (j == 1) {
                                            if ("NonDeterministic".equals(c[3])) {
                                                tableCarregar.setNDeterministico(true);
                                            }
                                        }
                                    }
                                }
                                break;
                            case "Infinity_Server":
                                for (int j = 0; j < 2; j++) {
                                    linha = lerArq.readLine();
                                    String[] c = linha.split(" ");
                                    if (c[0].equals("a")) {
                                        tableCarregar.getLabels().add(c[1]);
                                        tableCarregar.getMetricas().add(c[2]);
                                        if (j == 1) {
                                            if ("NonDeterministic".equals(c[3])) {
                                                tableCarregar.setNDeterministico(true);
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                        ListasArmazenamento.listaCarregamento.add(tableCarregar);
                        break;
                    // Evento Durativo    
                    case "2":
                        tableCarregar = new Parser("", "", new ArrayList<>(), 
                                new ArrayList<>(), new ArrayList<>(), new ArrayList<>(),
                                new ArrayList<>(), false, false, false, false, false, false,
                                "", "", "", "", "", new ArrayList<>(), new ArrayList<>(),
                                new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
                        tableCarregar.setId(b[1]);
                        tableCarregar.setGraphicRepresentation(b[2]);
                        tableCarregar.setDurativo(true);
                        tableCarregar.setFuncTrans(true);
                        tableCarregar.setFuncaoTrans(b[3]);
                        for (int k = 0; k < Integer.parseInt(b[4]); k++) {
                            linha = lerArq.readLine();
                            String[] c = linha.split(" ");
                            if (c[0].equals("b")) {
                                if (c.length > 3) {
                                    tableCarregar.setTipos(c[1] + " " + c[2]);
                                    tableCarregar.setVars(c[3]);
                                } else {
                                    tableCarregar.setTipos(c[1]);
                                    tableCarregar.setVars(c[2]);
                                }
                            }
                        }
                        ListasArmazenamento.listaCarregamento.add(tableCarregar);
                        break;
                    // Instantaneo
                    case "3":
                        tableCarregar = new Parser("", "", new ArrayList<>(), 
                                new ArrayList<>(), new ArrayList<>(), new ArrayList<>(),
                                new ArrayList<>(), false, false, false, false, false,
                                false, "", "", "", "", "", new ArrayList<>(), new ArrayList<>(),
                                new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
                        switch (b[1]) {
                            // Com operacao logica
                            case "y":
                                tableCarregar.setLogicOperation(b[1]);
                                tableCarregar.setId(b[2]);
                                tableCarregar.setGraphicRepresentation(b[3]);
                                tableCarregar.setInstantaneo(true);
                                tableCarregar.setFuncaoTrans(b[4]);
                                for (int k = 0; k < Integer.parseInt(b[5]); k++) {
                                    linha = lerArq.readLine();
                                    String[] c = linha.split(" ");
                                    if (c[0].equals("b")) {
                                        if (c.length > 3) {
                                            tableCarregar.setTipos(c[1] + " " + c[2]);
                                            tableCarregar.setVars(c[3]);
                                        } else {
                                            tableCarregar.setTipos(c[1]);
                                            tableCarregar.setVars(c[2]);
                                        }
                                    }
                                }
                                ListasArmazenamento.listaCarregamento.add(tableCarregar);
                                break;
                            // Sem operacao logica
                            case "n":
                                /* Aplica o valor booleano de logicoPeration mesmo que for "n".
                                O não uso deste valor pode acarretar erro na leitura do arquivo
                                ou em alguma diferenciação na hora do tratamento */
                                tableCarregar.setLogicOperation(b[1]);
                                tableCarregar.setId(b[2]);
                                tableCarregar.setGraphicRepresentation(b[3]);
                                tableCarregar.setInstantaneo(true);
                                tableCarregar.setFuncaoTrans(b[4]);

                                for (int k = 0; k < Integer.parseInt(b[5]); k++) {
                                    linha = lerArq.readLine();
                                    String[] c = linha.split(" ");
                                    if (c[0].equals("b")) {
                                        if (c.length > 3) {
                                            tableCarregar.setTipos(c[1] + " " + c[2]);
                                            tableCarregar.setVars(c[3]);
                                        } else {
                                            tableCarregar.setTipos(c[1]);
                                            tableCarregar.setVars(c[2]);
                                        }
                                    }
                                }
                                ListasArmazenamento.listaCarregamento.add(tableCarregar);
                                break;
                            default:
                                tableCarregar.setId(b[1]);
                                tableCarregar.setGraphicRepresentation(b[2]);
                                tableCarregar.setInstantaneo(true);
                                tableCarregar.setInputTrans(b[3]);
                                tableCarregar.setOutputTrans(b[4]);

                                for (int k = 0; k < Integer.parseInt(b[5]); k++) {
                                    linha = lerArq.readLine();
                                    String[] c = linha.split(" ");
                                    if (c[0].equals("b")) {
                                        if (c.length > 3) {
                                            tableCarregar.setTipos(c[1] + " " + c[2]);
                                            tableCarregar.setVars(c[3]);
                                        } else {
                                            tableCarregar.setTipos(c[1]);
                                            tableCarregar.setVars(c[2]);
                                        }
                                    }
                                }
                                ListasArmazenamento.listaCarregamento.add(tableCarregar);
                                break;
                        }
                    case "4":
                        ListasArmazenamento.setFalha(true);
                        break;
                    case "5":
                        ListasArmazenamento.setFalhaCapacidade(true);
                        break;
                    case "6":
                        ListasArmazenamento.setEvent(b[1]);
                        break;
                    case "7":
                        switch (b[1]) {
                            case "Loss":
                                ListasArmazenamento.setPerda(true);
                                break;
                            case "Service":
                                ListasArmazenamento.setAtendimento(true);
                                ListasArmazenamento.setAtendimentoMet(b[2]);
                                break;
                            case "Queue":
                                ListasArmazenamento.setFila(true);
                                ListasArmazenamento.setFilaMet(b[2]);
                                break;
                            default:
                        }
                    default:
                }
                linha = lerArq.readLine();
            } // lê da segunda até a última linha 
            lerArq.close();
        } catch (IOException e) {
            System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewSimulator;
    private javax.swing.JButton btnOpenSimulator;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}

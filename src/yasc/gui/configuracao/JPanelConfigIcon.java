package yasc.gui.configuracao;

import yasc.Main;
import java.util.HashSet;
import java.util.Locale;
import java.util.ResourceBundle;
import yasc.escalonador.ManipularArquivos;
import yasc.gui.iconico.grade.Durativo;
import yasc.gui.iconico.grade.FilaServidor;
import yasc.gui.iconico.grade.FilaServidores;
import yasc.gui.iconico.grade.FilasServidor;
import yasc.gui.iconico.grade.FilasServidores;
import yasc.gui.iconico.grade.Instantaneo;
import yasc.gui.iconico.grade.Internet;
import yasc.gui.iconico.grade.ItemGrade;
import yasc.gui.iconico.grade.Link;
import yasc.gui.iconico.grade.ServidorInfinito;

public class JPanelConfigIcon extends javax.swing.JPanel {

    private VariedRowTable Tmachine;
    private VariedRowTable Tcluster;
    private final VariedRowTable Tlink;
    private final VariedRowTable tFila_Servidor;
    private final VariedRowTable tFilas_Servidor;
    private final VariedRowTable tFila_Servidores;
    private final VariedRowTable tFilas_Servidores;
    private final VariedRowTable tServidor_Infinito;
    private final VariedRowTable tInstantaneo;
    private final VariedRowTable tInstantaneoForm;
    private final VariedRowTable tInstantaneoTable;
    private final VariedRowTable tDurativo;
    private ManipularArquivos escalonadores;

    public JPanelConfigIcon() {
        initLanguage();
        Tlink = new VariedRowTable();
        Tlink.setModel(new LinkTable());
        Tlink.setRowHeight(20);

        tFila_Servidor = new VariedRowTable();
        tFila_Servidor.setModel(new FilaServidorTable());
        tFila_Servidor.setRowHeight(20);

        tFilas_Servidor = new VariedRowTable();
        tFilas_Servidor.setModel(new FilasServidorTable());
        tFilas_Servidor.setRowHeight(20);

        tFila_Servidores = new VariedRowTable();
        tFila_Servidores.setModel(new FilaServidoresTable());
        tFila_Servidores.setRowHeight(20);

        tFilas_Servidores = new VariedRowTable();
        tFilas_Servidores.setModel(new FilasServidoresTable());
        tFilas_Servidores.setRowHeight(20);

        tServidor_Infinito = new VariedRowTable();
        tServidor_Infinito.setModel(new ServidorInfinitoTable());
        tServidor_Infinito.setRowHeight(20);

        tInstantaneo = new VariedRowTable();
        tInstantaneo.setModel(new InstantaneoTable());
        tInstantaneo.setRowHeight(20);

        tInstantaneoForm = new VariedRowTable();
        tInstantaneoForm.setModel(new LinkTable());
        tInstantaneoForm.setRowHeight(20);

        tInstantaneoTable = new VariedRowTable();
        tInstantaneoTable.setModel(new LinkTable());
        tInstantaneoTable.setRowHeight(20);

        tDurativo = new VariedRowTable();
        tDurativo.setModel(new DurativoTable());
        tDurativo.setRowHeight(20);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jLabelTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabelIconName = new javax.swing.JLabel();

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelTitle.setText(Main.languageResource.getString("Machine icon configuration"));

        jLabelIconName.setText("Configuration for the icon # 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelIconName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelIconName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
        );

        jLabelTitle.getAccessibleContext().setAccessibleName("");
        jLabelIconName.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelIconName;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    public void setEscalonadores(ManipularArquivos escalonadores) {
        this.escalonadores = escalonadores;
        for (Object escal : escalonadores.listar()) {
            getTabelaMaquina().getEscalonadores().addItem(escal);
        }
    }

    public void setIcone(ItemGrade icone) {
        if (icone instanceof Link) {
            jLabelTitle.setText(Main.languageResource.getString("Link icon configuration"));
        } else if (icone instanceof Internet) {
            jLabelTitle.setText(Main.languageResource.getString("Internet icon configuration"));
        }
        jLabelIconName.setText(Main.languageResource.getString("Configuration for the icon") + "#: " + icone.getId().getIdGlobal());
        if (icone instanceof FilaServidor) {
            jLabelTitle.setText(Main.languageResource.getString("One queue one server icon configuration"));
            ((FilaServidorTable) tFila_Servidor.getModel()).setFila_Servidor((FilaServidor) icone);
            jScrollPane1.setViewportView(tFila_Servidor);
        } else if (icone instanceof FilasServidor) {
            jLabelTitle.setText(Main.languageResource.getString("Multiple queues one server icon configuration"));
            ((FilasServidorTable) tFilas_Servidor.getModel()).setFilas_Servidor((FilasServidor) icone);
            jScrollPane1.setViewportView(tFilas_Servidor);
        } else if (icone instanceof FilasServidores) {
            jLabelTitle.setText(Main.languageResource.getString("Multiple queues multiple servers icon configuration"));
            ((FilasServidoresTable) tFilas_Servidores.getModel()).setFilas_Servidores((FilasServidores) icone);
            jScrollPane1.setViewportView(tFilas_Servidores);
        } else if (icone instanceof FilaServidores) {
            jLabelTitle.setText(Main.languageResource.getString("One queue multiple servers icon configuration"));
            ((FilaServidoresTable) tFila_Servidores.getModel()).setFila_Servidores((FilaServidores) icone);
            jScrollPane1.setViewportView(tFila_Servidores);
        } else if (icone instanceof ServidorInfinito) {
            jLabelTitle.setText(Main.languageResource.getString("Infinity server icon configuration"));
            ((ServidorInfinitoTable) tServidor_Infinito.getModel()).setServidor_Infinito((ServidorInfinito) icone);
            jScrollPane1.setViewportView(tServidor_Infinito);
        } else if (icone instanceof Instantaneo) {
            jLabelTitle.setText(Main.languageResource.getString("Instantaneous icon configuration"));
            ((InstantaneoTable) tInstantaneo.getModel()).setInstantaneo((Instantaneo) icone);
            jScrollPane1.setViewportView(tInstantaneo);
        } else if (icone instanceof Durativo) {
            jLabelTitle.setText(Main.languageResource.getString("Durational icon configuration"));
            ((DurativoTable) tDurativo.getModel()).setDurativo((Durativo) icone);
            jScrollPane1.setViewportView(tDurativo);
        } else {
            getTabelaLink().setLink(icone);
            jScrollPane1.setViewportView(Tlink);
        }
    }

    public void setIcone(ItemGrade icone, HashSet<String> usuarios) {
        if (!escalonadores.listarRemovidos().isEmpty()) {
            for (Object escal : escalonadores.listarRemovidos()) {
                getTabelaMaquina().getEscalonadores().removeItem(escal);
            }
            escalonadores.listarRemovidos().clear();
        }
        if (!escalonadores.listarAdicionados().isEmpty()) {
            for (Object escal : escalonadores.listarAdicionados()) {
                getTabelaMaquina().getEscalonadores().addItem(escal);
            }
            escalonadores.listarAdicionados().clear();
        }
        jLabelIconName.setText(Main.languageResource.getString("Configuration for the icon") + "#: " + icone.getId().getIdGlobal());
    }

    public String getTitle() {
        return jLabelTitle.getText();
    }

    public MachineTable getTabelaMaquina() {
        return (MachineTable) Tmachine.getModel();
    }

    public ClusterTable getTabelaCluster() {
        return (ClusterTable) Tcluster.getModel();
    }

    public LinkTable getTabelaLink() {
        return (LinkTable) Tlink.getModel();
    }
    
    /*public void setLanguage() {
        ((FilaServidorTable) tFila_Servidor.getModel()).initLanguage();
        ((FilasServidorTable) tFilas_Servidor.getModel()).initLanguage();
        ((FilaServidoresTable) tFila_Servidores.getModel()).initLanguage();
        ((FilasServidoresTable) tFilas_Servidores.getModel()).initLanguage();
        ((ServidorInfinitoTable) tServidor_Infinito.getModel()).initLanguage();
        ((InstantaneoTable) tInstantaneo.getModel()).initLanguage();
        ((DurativoTable) tDurativo.getModel()).initLanguage();
    }*/
    
    public void initLanguage() {
        Main.languageResource = ResourceBundle.getBundle("yasc.idioma.Idioma", Locale.getDefault());
    }
}

package yasc.gui;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import yasc.Main;
import yasc.arquivo.CParser_form.CParserForm;
import yasc.arquivo.SalvarResultadosHTML;
import yasc.arquivo.xml.ConfiguracaoISPD;
import yasc.gui.entrada.ListasArmazenamento;
import yasc.gui.iconico.grade.Instantaneo;
import yasc.motor.filas.RedeDeFilas;
import yasc.motor.filas.Tarefa;
import yasc.motor.filas.servidores.CS_Comunicacao;
import yasc.motor.filas.servidores.implementacao.CS_Instantaneo;
import yasc.motor.metricas.Metricas;
import yasc.motor.metricas.MetricasComunicacao;
import yasc.motor.metricas.MetricasGlobais;

public class JPanelResultados extends javax.swing.JDialog {

    /**
     * Cria no JResultado sem carregar parte gráfica para utilizar no modo
     * terminal
     */
    public JPanelResultados(Metricas metricas, RedeDeFilas rdf, List tarefas) {
        html.setMetricasGlobais(metricas.getMetricasGlobais());
        getResultadosTarefas(metricas);
        html.setMetricasTarefas(metricas);
    }

    /**
     * Cria no JResultado sem carregar parte gráfica para utilizar no modo
     * terminal usando apenas a classe "Metricas"
     */
    public JPanelResultados(Metricas metricas) {
        html.setMetricasGlobais(metricas.getMetricasGlobais());
        getResultadosTarefas(metricas);
        html.setMetricasTarefas(metricas);
    }

    /**
     * Creates new form JResultados
     */
    public JPanelResultados(java.awt.Window parent, Metricas metricas, RedeDeFilas rdf, List<Tarefa> tarefas, ConfiguracaoISPD config) {
        super(parent, ModalityType.APPLICATION_MODAL);
 
        initComponents();
        
        this.jTextAreaGlobal.setText(getResultadosGlobais(metricas.getMetricasGlobais()));
        html.setMetricasGlobais(metricas.getMetricasGlobais());
        
        this.jTextAreaTarefa.setText(getResultadosTarefas(metricas));
        html.setMetricasTarefas(metricas);
    
        if ("notLogic".equals(Main.tipo)) {
            this.jTextAreaTempoFila.setText(getTempoFila(metricas));
            this.jTextAreaTempoAtend.setText(getTempoAtend(metricas));
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPanelGraficosIndividuais = new javax.swing.JTabbedPane();
        jPanelGlobal = new javax.swing.JPanel();
        jScrollPaneGobal = new javax.swing.JScrollPane();
        jTextAreaGlobal = new javax.swing.JTextArea();
        jScrollPaneTarefa = new javax.swing.JScrollPane();
        jTextAreaTarefa = new javax.swing.JTextArea();
        jScrollPaneTempoFila = new javax.swing.JScrollPane();
        jTextAreaTempoFila = new javax.swing.JTextArea();
        jScrollPaneTempoAtend = new javax.swing.JScrollPane();
        jTextAreaTempoAtend = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextAreaGlobal.setEditable(false);
        jTextAreaGlobal.setColumns(20);
        jTextAreaGlobal.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jTextAreaGlobal.setRows(5);
        jScrollPaneGobal.setViewportView(jTextAreaGlobal);

        javax.swing.GroupLayout jPanelGlobalLayout = new javax.swing.GroupLayout(jPanelGlobal);
        jPanelGlobal.setLayout(jPanelGlobalLayout);
        jPanelGlobalLayout.setHorizontalGroup(
            jPanelGlobalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGlobalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneGobal, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelGlobalLayout.setVerticalGroup(
            jPanelGlobalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGlobalLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPaneGobal, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPanelGraficosIndividuais.addTab("Global", jPanelGlobal);

        jTextAreaTarefa.setEditable(false);
        jTextAreaTarefa.setColumns(20);
        jTextAreaTarefa.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jTextAreaTarefa.setRows(5);
        jScrollPaneTarefa.setViewportView(jTextAreaTarefa);

        jTabbedPanelGraficosIndividuais.addTab(yasc.gui.entrada.ListasArmazenamento.getEvent(), jScrollPaneTarefa);

        jTextAreaTempoFila.setEditable(false);
        jTextAreaTempoFila.setColumns(20);
        jTextAreaTempoFila.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jTextAreaTempoFila.setRows(5);
        jScrollPaneTempoFila.setViewportView(jTextAreaTempoFila);

        jTabbedPanelGraficosIndividuais.addTab(Main.languageResource.getString("Queue time"), jScrollPaneTempoFila); // NOI18N

        jTextAreaTempoAtend.setEditable(false);
        jTextAreaTempoAtend.setColumns(20);
        jTextAreaTempoAtend.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jTextAreaTempoAtend.setRows(5);
        jScrollPaneTempoAtend.setViewportView(jTextAreaTempoAtend);

        jTabbedPanelGraficosIndividuais.addTab(Main.languageResource.getString("Attendance time"), jScrollPaneTempoAtend); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPanelGraficosIndividuais)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPanelGraficosIndividuais)
        );

        jTabbedPanelGraficosIndividuais.getAccessibleContext().setAccessibleName("");
        jTabbedPanelGraficosIndividuais.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelGlobal;
    private javax.swing.JScrollPane jScrollPaneGobal;
    private javax.swing.JScrollPane jScrollPaneTarefa;
    private javax.swing.JScrollPane jScrollPaneTempoAtend;
    private javax.swing.JScrollPane jScrollPaneTempoFila;
    private javax.swing.JTabbedPane jTabbedPanelGraficosIndividuais;
    private javax.swing.JTextArea jTextAreaGlobal;
    private javax.swing.JTextArea jTextAreaTarefa;
    private javax.swing.JTextArea jTextAreaTempoAtend;
    private javax.swing.JTextArea jTextAreaTempoFila;
    // End of variables declaration//GEN-END:variables
    private final SalvarResultadosHTML html = new SalvarResultadosHTML();

    private String getResultadosGlobais(MetricasGlobais globais) {
        String texto = "\t\t" + Main.languageResource.getString("Simulation Results") + "\n\n";
        texto += String.format("\t" + Main.languageResource.getString("Total Simulated Time") + "= %4f s\n", globais.getTempoSimulacao());
        
        if (ListasArmazenamento.isPerda())
            texto += String.format("\t" + Main.languageResource.getString("Total of Lost") + ListasArmazenamento.getEvent() + " = %d \n", globais.getTotalPerdido());
        if (ListasArmazenamento.isFila())
            texto += String.format("\t" + Main.languageResource.getString("Average time in the queue") + " = %.4f " + ListasArmazenamento.getFilaMet() + " \n", globais.getTempo_MFila());
        if (ListasArmazenamento.isAtendimento())    
            texto += String.format("\t" + Main.languageResource.getString("Average time of service received") +" = %.4f " + ListasArmazenamento.getAtendimentoMet() + " \n", globais.getTempo_MAtendimento());
        
        return texto;
    }
    
    private String getResultadosTarefas(Metricas metrica) {
        if ("notLogic".equals(Main.tipo)) {
            String texto = "\n\t\t" +Main.languageResource.getString("NUMBER OF LOST TASKS") +"\n\n";
            for(int i = 0; i < metrica.getRedeDeFilas().getCs().size(); i++){
                CS_Comunicacao aux = (CS_Comunicacao) metrica.getRedeDeFilas().getCs().get(i);
                texto += String.format(ListasArmazenamento.getEvent() +" " + Main.languageResource.getString("lost by") + " " + aux.getId() + ": %d.\n", aux.getNumTarefasPerdidasServ()+ aux.getNumTarefasPerdidas_Atend());
            }
            return texto;
        } else {
            String texto = "\n\t\t" +Main.languageResource.getString("ELEMENTS VALUES AND RESULT") +"\n\n";
            
            if (JPrincipal.clock != null) {
                Map<Double, String> resultados = new TreeMap<>(metrica.getResultadoPorClock());
                double tempo; String s;
                
                texto += String.format("Tempo\tSolução do circuito\n");
                for (Map.Entry<Double, String> r : resultados.entrySet()) {
                    tempo = r.getKey();
                    s = r.getValue();
                    texto += String.format(tempo + "\t\t" + s + "\n");
                }

            } else {
                for (int i = 0; i < metrica.getRedeDeFilas().getCs().size(); i++) {
                    CS_Comunicacao aux = (CS_Comunicacao) metrica.getRedeDeFilas().getCs().get(i);
                    texto += String.format(ListasArmazenamento.getEvent() +" " + Main.languageResource.getString("Value") + " " + aux.getId() + ": %d.\n", aux.valorF(i));
                    System.out.println("valorF: " +aux.valorF(i));
                }
            }
            MetricasComunicacao.valorSaida.clear();
            CParserForm.valorResult.clear();
            CParserForm.idObj.clear();
            CS_Instantaneo.elemAtual.clear();
            CS_Instantaneo.elemAncestral.clear();
            CS_Instantaneo.passagemOrg.clear();
            CS_Instantaneo.goTo.clear();
            CS_Instantaneo.Pass.clear();
            CS_Instantaneo.id2.clear();
            CS_Instantaneo.O.clear();
            CS_Instantaneo.D.clear();
            CS_Instantaneo.ancestral.clear();
            Instantaneo.j = 0;
            Instantaneo.v = 0;
            Main.ordena  = true;
            
            return texto;
        }
    }
    
    private String getTempoFila (Metricas metrica) {
        String texto = "\n\t\t" + Main.languageResource.getString("TOTAL TIME IN QUEUE")+"\n\n";
        for(int i = 0; i < metrica.getRedeDeFilas().getCs().size(); i++){
            CS_Comunicacao aux = (CS_Comunicacao) metrica.getRedeDeFilas().getCs().get(i);
            texto += String.format(aux.getId() + ": %.2f\n", aux.getTempoFila());
        }
        return texto;
    }
    
    private String getTempoAtend (Metricas metrica) {
        String texto = "\n\t\t" + Main.languageResource.getString("TOTAL TIME OF RECEIVED SERVICE") +"\n\n";
        for(int i = 0; i < metrica.getRedeDeFilas().getCs().size(); i++){
            CS_Comunicacao aux = (CS_Comunicacao) metrica.getRedeDeFilas().getCs().get(i);
            texto += String.format(aux.getId() + ": %.2f\n", aux.getTempoAtend());
        }
        return texto;
    }
}

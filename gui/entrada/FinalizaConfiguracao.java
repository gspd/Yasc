package yasc.gui.entrada;

import yasc.Main;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class FinalizaConfiguracao extends javax.swing.JFrame {

    public static ArrayList<String> arrayID = new ArrayList<String>();
    private final DefaultListModel strings;

    /**
     * Creates new form Finaliza
     */
    public FinalizaConfiguracao() {
        this.strings = new DefaultListModel();
        for (int i = 0; i < ListasArmazenamento.lista.size(); i++) {
            strings.addElement(ListasArmazenamento.lista.get(i).getId());
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        FinalizaSim = new javax.swing.JButton();
        FinalizaNao = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListItem = new javax.swing.JList();
        FinalizaNao1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("imagens/gspd.png")));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText(Main.languageResource.getString("What do you want to do?")); // NOI18N

        FinalizaSim.setText(Main.languageResource.getString("Create item")); // NOI18N
        FinalizaSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinalizaSimActionPerformed(evt);
            }
        });

        FinalizaNao.setText(Main.languageResource.getString("Continue")); // NOI18N
        FinalizaNao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinalizaNaoActionPerformed(evt);
            }
        });

        jListItem.setModel(strings);
        jListItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jListItem);

        FinalizaNao1.setText(Main.languageResource.getString("Delete item")); // NOI18N
        FinalizaNao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinalizaNao1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(FinalizaSim, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FinalizaNao1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FinalizaNao, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FinalizaNao1)
                    .addComponent(FinalizaSim)
                    .addComponent(FinalizaNao))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void FinalizaNao1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinalizaNao1ActionPerformed
        // TODO add your handling code here:
        int i = jListItem.getSelectedIndex();
        if (i == -1) {
            JFrame frame = new JFrame("Warning");
            JOptionPane.showMessageDialog(frame, Main.languageResource.getString("Please, select a item"));
        } else {
            ListasArmazenamento.lista.remove(i);
            strings.remove(i);
        }
    }//GEN-LAST:event_FinalizaNao1ActionPerformed

    private void FinalizaNaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinalizaNaoActionPerformed
        // TODO add your handling code here:
        if (ListasArmazenamento.lista.size() > 0) {
            Falhas dialog = new Falhas("string");
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            this.setVisible(false);
            dialog.setVisible(true);
        } else {
            JFrame frame = new JFrame("Warning");
            JOptionPane.showMessageDialog(frame, Main.languageResource.getString("You must create at least a item to continue"));
        }
    }//GEN-LAST:event_FinalizaNaoActionPerformed

    private void FinalizaSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinalizaSimActionPerformed
        Gerar dialog = new Gerar();
        this.setVisible(false);
        dialog.setVisible(true);
    }//GEN-LAST:event_FinalizaSimActionPerformed

    public static void escrita(ArrayList<Parser> Table) throws IOException {
        String nomeDiretorio = null;
        
        try {
            nomeDiretorio = "simulatorlibrary";
            // Verifica se o diretório existe.
            if (!Paths.get(nomeDiretorio).toFile().exists()) {
                // Cria o diretório
                (new File(nomeDiretorio)).mkdir();
            } else {
                nomeDiretorio = "simulatorlibrary_" + ListasArmazenamento.idPasta;
                if (Paths.get(nomeDiretorio).toFile().exists()) {
                    while (Paths.get(nomeDiretorio).toFile().exists()) {
                        ListasArmazenamento.idPasta++;
                        nomeDiretorio = "simulatorlibrary_" + ListasArmazenamento.idPasta;
                    }
                }
                (new File(nomeDiretorio)).mkdir();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Err", "Erro ao criar o diretório" + ex.toString(), JOptionPane.ERROR_MESSAGE);
        }

        int cont = 0;
        do {
            if (!ListasArmazenamento.lista.get(cont).getGraphicRepresentation().equals("") &&
                    !ListasArmazenamento.lista.get(cont).getGraphicRepresentation().startsWith("__")) {
                carregarImagens(ListasArmazenamento.lista.get(cont).getGraphicRepresentation(), cont, nomeDiretorio);
            }
            arrayID.add(ListasArmazenamento.lista.get(cont).getId());
            cont++;
        } while (cont <= ListasArmazenamento.lista.size() - 1);
        
        arquivoConfig(nomeDiretorio);
    }

    /**
     * Cria o arquivo de configuração
     * @param nomeDir 
     * @throws IOException 
     */
    public static void arquivoConfig(String nomeDir) throws IOException {
        String nomeDiretorio = nomeDir;
        String separador = java.io.File.separator;
        ArrayList<Parser> list = ListasArmazenamento.lista;
        File noDiretorioAtual = new File(nomeDiretorio + separador + "simulador.conf");
        
        try (FileWriter fw = new FileWriter(noDiretorioAtual, true); // Construtor recebe como argumento
                BufferedWriter bw = new BufferedWriter(fw)) {

            // Escrita
            for (int i = 0; i < list.size(); i++) {
                // Filas
                if (list.get(i).isFila()) {
                    bw.write("1 ");
                    bw.write(ListasArmazenamento.lista.get(i).getId() + " ");

                    // Verifica o tipo de representacao grafica e escreve
                    if (list.get(i).getGraphicRepresentation().equals(""))
                        bw.write(nomeDiretorio + separador + 
                                ListasArmazenamento.lista.get(i).getId() + ".png" + " ");
                    else if (list.get(i).getGraphicRepresentation().startsWith("__"))
                        bw.write(list.get(i).getGraphicRepresentation() + " ");
                    else
                        bw.write("- ");

                    int count;
                    String tipo = ListasArmazenamento.lista.get(i).getFilaTipo();

                    bw.write(tipo + "\n");

                    // Verifica o tipo de fila e escreve               
                    if (tipo.equals("One_queue_one_server") ||
                            tipo.equals("Infinity_Server")) {
                        count = 2;
                    } else if (tipo.equals("Multiple_queues_one_server") || 
                            tipo.equals("One_queue_multiple_servers")) {
                        count = 3;
                    } else {
                        count = 4;
                    }

                    for (int j = 0; j < count; j++) {
                        bw.write("a " + ListasArmazenamento.lista.get(i).getLabels().get(j) + " ");
                        bw.write(ListasArmazenamento.lista.get(i).getMetricas().get(j) + " ");
                        if (j == 1 && ListasArmazenamento.lista.get(i).isNDeterministico()) {
                            bw.write("NonDeterministic");
                        } else {
                            bw.write("-");
                        }
                        bw.write("\n");
                    }
                } 
                // Objetos com funcao de transfencia com duracao de tempo
                else if (ListasArmazenamento.lista.get(i).isFuncTrans() &&
                        ListasArmazenamento.lista.get(i).isDurativo()) {
                    bw.write("2 ");
                    bw.write(ListasArmazenamento.lista.get(i).getId() + " ");

                    // Verifica o tipo de representacao grafica e escreve
                    if (list.get(i).getGraphicRepresentation().equals(""))
                        bw.write(nomeDiretorio + separador + 
                                ListasArmazenamento.lista.get(i).getId() + ".png" + " ");
                    else if (list.get(i).getGraphicRepresentation().startsWith("__"))
                        bw.write(list.get(i).getGraphicRepresentation() + " ");
                    else
                        bw.write("- ");

                    String x = (ListasArmazenamento.lista.get(i).getFuncaoTrans() + ";");
                    x = x.replaceAll(" ", "");
                    bw.write(x + " ");
                    bw.write(ListasArmazenamento.lista.get(i).getTipos().size() + "\n");

                    for (int j = 0; j < ListasArmazenamento.lista.get(i).getTipos().size(); j++) {
                        bw.write("b " + ListasArmazenamento.lista.get(i).getTipos().get(j) + " ");
                        bw.write(ListasArmazenamento.lista.get(i).getVars().get(j) + "\n");
                    }
                } else { // Instantaneo
                    bw.write("3 ");

                    if (ListasArmazenamento.lista.get(i).isForm()) { // Formula
                        bw.write(ListasArmazenamento.lista.get(i).getLogicOperation() + " ");
                        bw.write(ListasArmazenamento.lista.get(i).getId() + " ");

                        // Verifica o tipo de representacao grafica e escreve
                        if (list.get(i).getGraphicRepresentation().equals(""))
                            bw.write(nomeDiretorio + separador + 
                                    ListasArmazenamento.lista.get(i).getId() + ".png" + " ");
                        else if (list.get(i).getGraphicRepresentation().startsWith("__"))
                            bw.write(list.get(i).getGraphicRepresentation() + " ");
                        else
                            bw.write("- ");

                        String x = (ListasArmazenamento.lista.get(i).getFuncaoTrans() + ";");
                        x = x.replaceAll(" ", "");
                        bw.write(x + " ");
                        bw.write(ListasArmazenamento.lista.get(i).getTipos().size() + "\n");

                        for (int j = 0; j < ListasArmazenamento.lista.get(i).getTipos().size(); j++) {
                            bw.write("b " + ListasArmazenamento.lista.get(i).getTipos().get(j) + " ");
                            bw.write(ListasArmazenamento.lista.get(i).getVars().get(j) + "\n");
                        }
                    } else {  // Tabela
                        bw.write(ListasArmazenamento.lista.get(i).getId() + " ");
                        Gerar.idTabela.add(ListasArmazenamento.lista.get(i).getId()+"");

                        // Verifica o tipo de representacao grafica e escreve
                        if (list.get(i).getGraphicRepresentation().equals(""))
                            bw.write(nomeDiretorio + separador + 
                                    ListasArmazenamento.lista.get(i).getId() + ".png" + " ");
                        else if (list.get(i).getGraphicRepresentation().startsWith("__"))
                            bw.write(list.get(i).getGraphicRepresentation() + " ");
                        else
                            bw.write("- ");

                        String y = (ListasArmazenamento.lista.get(i).getInputTrans() + ";");
                        String z = (ListasArmazenamento.lista.get(i).getOutputTrans() + ";");
                        y = y.replaceAll(" ", "");
                        z = z.replaceAll(" ", "");
                        bw.write(y + " ");
                        bw.write(z + " ");
                        bw.write(ListasArmazenamento.lista.get(i).getTipos().size() + "\n");

                        for (int j = 0; j < ListasArmazenamento.lista.get(i).getTipos().size(); j++) {
                            bw.write("b " + ListasArmazenamento.lista.get(i).getTipos().get(j) + " ");
                            bw.write(ListasArmazenamento.lista.get(i).getVars().get(j) + "\n");
                        }
                        bw.write("t" + " ");

                        for (int k = 0; k < ListasArmazenamento.lista.get(i).getInputColunas().size(); k++) {
                            bw.write(ListasArmazenamento.lista.get(i).getInputColunas().get(k) + " ");
                        }

                        for (int k = 0; k < ListasArmazenamento.lista.get(i).getOutputColunas().size(); k++) {
                            bw.write(ListasArmazenamento.lista.get(i).getOutputColunas().get(k) + " ");
                        }
                        bw.write("\n");

                        for (int l = 0; l < ListasArmazenamento.lista.get(i).getNumArray().size(); l++) {
                            bw.write("t" + " ");
                            for (int n = 0; n < ListasArmazenamento.lista.get(i).getNomeColunas().size(); n++) {
                                bw.write(ListasArmazenamento.lista.get(i).ValorMatriz(l, n) + " ");
                            }
                            bw.write("\n");
                        }
                    }
                }
            }
        
            if (ListasArmazenamento.isFalha()) {
                bw.write("4 Failure \n");
            }
            if (ListasArmazenamento.isFalha() && ListasArmazenamento.isFalhaCapacidade()) {
                bw.write("5 Capacity \n");
            }
            bw.write("6 " + ListasArmazenamento.getEvent() + "\n");
            if (ListasArmazenamento.isPerda()) {
                bw.write("7 Loss \n");
            }
            if (ListasArmazenamento.isAtendimento()) {
                bw.write("7 Service ");
                bw.write(ListasArmazenamento.getAtendimentoMet() + "\n");
            }
            if (ListasArmazenamento.isFila()) {
                bw.write("7 Queue ");
                bw.write(ListasArmazenamento.getFilaMet() + "\n");
            }

            // Quebra de linha
            bw.newLine();
            
            // Fecha os recursos
            bw.close();
            fw.close();
        }
    }

    /**
     * Cria uma imagem redimensionada da imagem original
     * @param str Arquivo de imagem
     * @param i Posicao do objeto na lista
     * @param dir Caminho de diretorio
     * @throws FileNotFoundException
     * @throws IOException 
     */
    public static void carregarImagens(String str, int i, String dir) throws FileNotFoundException, IOException {
        String separador = java.io.File.separator;
        BufferedImage originalImage = ImageIO.read(new File(str));
        int width = 30;
        int height = 30;
        BufferedImage resizedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        resizedImage.getGraphics().drawImage(originalImage, 0, 0, width, height, null);
        try {
            ImageIO.write(resizedImage, "png", new File(dir + separador + ListasArmazenamento.lista.get(i).getId() + ".png"));
        } catch (IOException ex) {
            Logger.getLogger(FinalizaConfiguracao.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FinalizaNao;
    private javax.swing.JButton FinalizaNao1;
    private javax.swing.JButton FinalizaSim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jListItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
